
LAB3_BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080035ec  080035ec  000045ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003610  08003610  00005064  2**0
                  CONTENTS
  4 .ARM          00000000  08003610  08003610  00005064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003610  08003610  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00004610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003614  08003614  00004614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003618  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000064  0800367c  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  0800367c  00005158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a8f  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e36  00000000  00000000  0000db1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0000f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000827  00000000  00000000  00010410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017312  00000000  00000000  00010c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d85d  00000000  00000000  00027f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824ec  00000000  00000000  000357a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7c92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a18  00000000  00000000  000b7cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ba6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080035d4 	.word	0x080035d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080035d4 	.word	0x080035d4

0800014c <isButtonPressed>:
int TimeOutForKeyPress[BUTTON_COUNT] = {500, 500, 500};
int button_pressed[BUTTON_COUNT] = {0, 0, 0};
int button_long_pressed[BUTTON_COUNT] = {0, 0, 0};
int button_flag[BUTTON_COUNT] = {0, 0, 0};

int isButtonPressed(int buttonIndex){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[buttonIndex] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[buttonIndex] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000080 	.word	0x20000080

08000180 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int buttonIndex){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

	button_flag[buttonIndex] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	@ (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000080 	.word	0x20000080

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < BUTTON_COUNT; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e073      	b.n	8000294 <getKeyInput+0xf4>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a3d      	ldr	r2, [pc, #244]	@ (80002a4 <getKeyInput+0x104>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493c      	ldr	r1, [pc, #240]	@ (80002a8 <getKeyInput+0x108>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a3b      	ldr	r2, [pc, #236]	@ (80002ac <getKeyInput+0x10c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4937      	ldr	r1, [pc, #220]	@ (80002a4 <getKeyInput+0x104>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON[i]);
 80001cc:	4a38      	ldr	r2, [pc, #224]	@ (80002b0 <getKeyInput+0x110>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	4836      	ldr	r0, [pc, #216]	@ (80002b4 <getKeyInput+0x114>)
 80001da:	f002 f9cd 	bl	8002578 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a32      	ldr	r2, [pc, #200]	@ (80002ac <getKeyInput+0x10c>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001ea:	4a2e      	ldr	r2, [pc, #184]	@ (80002a4 <getKeyInput+0x104>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	492e      	ldr	r1, [pc, #184]	@ (80002ac <getKeyInput+0x10c>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d147      	bne.n	800028e <getKeyInput+0xee>
 80001fe:	4a29      	ldr	r2, [pc, #164]	@ (80002a4 <getKeyInput+0x104>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4928      	ldr	r1, [pc, #160]	@ (80002a8 <getKeyInput+0x108>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d13d      	bne.n	800028e <getKeyInput+0xee>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000212:	4a25      	ldr	r2, [pc, #148]	@ (80002a8 <getKeyInput+0x108>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4927      	ldr	r1, [pc, #156]	@ (80002b8 <getKeyInput+0x118>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d016      	beq.n	8000254 <getKeyInput+0xb4>
				KeyReg3[i] = KeyReg2[i];
 8000226:	4a20      	ldr	r2, [pc, #128]	@ (80002a8 <getKeyInput+0x108>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	4922      	ldr	r1, [pc, #136]	@ (80002b8 <getKeyInput+0x118>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE) {
 8000236:	4a20      	ldr	r2, [pc, #128]	@ (80002b8 <getKeyInput+0x118>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d125      	bne.n	800028e <getKeyInput+0xee>
					TimeOutForKeyPress[i] = 200;
 8000242:	4a1e      	ldr	r2, [pc, #120]	@ (80002bc <getKeyInput+0x11c>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	21c8      	movs	r1, #200	@ 0xc8
 8000248:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f7ff ff97 	bl	8000180 <subKeyProcess>
 8000252:	e01c      	b.n	800028e <getKeyInput+0xee>
				}

			} else {
				TimeOutForKeyPress[i]--;
 8000254:	4a19      	ldr	r2, [pc, #100]	@ (80002bc <getKeyInput+0x11c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025c:	1e5a      	subs	r2, r3, #1
 800025e:	4917      	ldr	r1, [pc, #92]	@ (80002bc <getKeyInput+0x11c>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 8000266:	4a15      	ldr	r2, [pc, #84]	@ (80002bc <getKeyInput+0x11c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d10d      	bne.n	800028e <getKeyInput+0xee>
					TimeOutForKeyPress[i] = 200;
 8000272:	4a12      	ldr	r2, [pc, #72]	@ (80002bc <getKeyInput+0x11c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	21c8      	movs	r1, #200	@ 0xc8
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[i] == PRESSED_STATE) {
 800027c:	4a0e      	ldr	r2, [pc, #56]	@ (80002b8 <getKeyInput+0x118>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <getKeyInput+0xee>
						subKeyProcess(i);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f7ff ff79 	bl	8000180 <subKeyProcess>
	for (int i = 0; i < BUTTON_COUNT; i++) {
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3301      	adds	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b02      	cmp	r3, #2
 8000298:	dd88      	ble.n	80001ac <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000018 	.word	0x20000018
 80002a8:	20000024 	.word	0x20000024
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000000 	.word	0x20000000
 80002b4:	40010800 	.word	0x40010800
 80002b8:	20000030 	.word	0x20000030
 80002bc:	2000003c 	.word	0x2000003c

080002c0 <fsm_automatic>:
 */

#include "fsm_automatic.h"


void fsm_automatic(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch (status){
 80002c4:	4b3c      	ldr	r3, [pc, #240]	@ (80003b8 <fsm_automatic+0xf8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b04      	cmp	r3, #4
 80002ca:	d869      	bhi.n	80003a0 <fsm_automatic+0xe0>
 80002cc:	a201      	add	r2, pc, #4	@ (adr r2, 80002d4 <fsm_automatic+0x14>)
 80002ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d2:	bf00      	nop
 80002d4:	080002e9 	.word	0x080002e9
 80002d8:	08000301 	.word	0x08000301
 80002dc:	08000329 	.word	0x08000329
 80002e0:	08000351 	.word	0x08000351
 80002e4:	08000379 	.word	0x08000379
	case NO_LED:
		status = RED_GREEN;
 80002e8:	4b33      	ldr	r3, [pc, #204]	@ (80003b8 <fsm_automatic+0xf8>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]
		setTimer2(GREEN_TIME*100);
 80002ee:	4b33      	ldr	r3, [pc, #204]	@ (80003bc <fsm_automatic+0xfc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2264      	movs	r2, #100	@ 0x64
 80002f4:	fb02 f303 	mul.w	r3, r2, r3
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fbbf 	bl	8001a7c <setTimer2>
		break;
 80002fe:	e058      	b.n	80003b2 <fsm_automatic+0xf2>
	case RED_GREEN:
		display7SEG_TFL();
 8000300:	f001 fac4 	bl	800188c <display7SEG_TFL>
		displayTFL();
 8000304:	f001 fd6a 	bl	8001ddc <displayTFL>
		if(timer2_flag == 1){
 8000308:	4b2d      	ldr	r3, [pc, #180]	@ (80003c0 <fsm_automatic+0x100>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d149      	bne.n	80003a4 <fsm_automatic+0xe4>
			status = RED_YELLOW;
 8000310:	4b29      	ldr	r3, [pc, #164]	@ (80003b8 <fsm_automatic+0xf8>)
 8000312:	2202      	movs	r2, #2
 8000314:	601a      	str	r2, [r3, #0]
			setTimer2(YELLOW_TIME*100);
 8000316:	4b2b      	ldr	r3, [pc, #172]	@ (80003c4 <fsm_automatic+0x104>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2264      	movs	r2, #100	@ 0x64
 800031c:	fb02 f303 	mul.w	r3, r2, r3
 8000320:	4618      	mov	r0, r3
 8000322:	f001 fbab 	bl	8001a7c <setTimer2>
		}
		break;
 8000326:	e03d      	b.n	80003a4 <fsm_automatic+0xe4>
	case RED_YELLOW:
		display7SEG_TFL();
 8000328:	f001 fab0 	bl	800188c <display7SEG_TFL>
		displayTFL();
 800032c:	f001 fd56 	bl	8001ddc <displayTFL>
		if(timer2_flag == 1){
 8000330:	4b23      	ldr	r3, [pc, #140]	@ (80003c0 <fsm_automatic+0x100>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d137      	bne.n	80003a8 <fsm_automatic+0xe8>
			status = GREEN_RED;
 8000338:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <fsm_automatic+0xf8>)
 800033a:	2203      	movs	r2, #3
 800033c:	601a      	str	r2, [r3, #0]
			setTimer2(GREEN_TIME*100);
 800033e:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <fsm_automatic+0xfc>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2264      	movs	r2, #100	@ 0x64
 8000344:	fb02 f303 	mul.w	r3, r2, r3
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fb97 	bl	8001a7c <setTimer2>
		}
		break;
 800034e:	e02b      	b.n	80003a8 <fsm_automatic+0xe8>
	case GREEN_RED:
		display7SEG_TFL();
 8000350:	f001 fa9c 	bl	800188c <display7SEG_TFL>
		displayTFL();
 8000354:	f001 fd42 	bl	8001ddc <displayTFL>
		if(timer2_flag ==1){
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <fsm_automatic+0x100>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d125      	bne.n	80003ac <fsm_automatic+0xec>
			status = YELLOW_RED;
 8000360:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <fsm_automatic+0xf8>)
 8000362:	2204      	movs	r2, #4
 8000364:	601a      	str	r2, [r3, #0]
			setTimer2(YELLOW_TIME*100);
 8000366:	4b17      	ldr	r3, [pc, #92]	@ (80003c4 <fsm_automatic+0x104>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2264      	movs	r2, #100	@ 0x64
 800036c:	fb02 f303 	mul.w	r3, r2, r3
 8000370:	4618      	mov	r0, r3
 8000372:	f001 fb83 	bl	8001a7c <setTimer2>
		}
		break;
 8000376:	e019      	b.n	80003ac <fsm_automatic+0xec>
	case YELLOW_RED:
		display7SEG_TFL();
 8000378:	f001 fa88 	bl	800188c <display7SEG_TFL>
		displayTFL();
 800037c:	f001 fd2e 	bl	8001ddc <displayTFL>
		if(timer2_flag == 1){
 8000380:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <fsm_automatic+0x100>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d113      	bne.n	80003b0 <fsm_automatic+0xf0>
			status = RED_GREEN;
 8000388:	4b0b      	ldr	r3, [pc, #44]	@ (80003b8 <fsm_automatic+0xf8>)
 800038a:	2201      	movs	r2, #1
 800038c:	601a      	str	r2, [r3, #0]
			setTimer2(GREEN_TIME*100);
 800038e:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <fsm_automatic+0xfc>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2264      	movs	r2, #100	@ 0x64
 8000394:	fb02 f303 	mul.w	r3, r2, r3
 8000398:	4618      	mov	r0, r3
 800039a:	f001 fb6f 	bl	8001a7c <setTimer2>
		}
		break;
 800039e:	e007      	b.n	80003b0 <fsm_automatic+0xf0>
	default:
		break;
 80003a0:	bf00      	nop
 80003a2:	e006      	b.n	80003b2 <fsm_automatic+0xf2>
		break;
 80003a4:	bf00      	nop
 80003a6:	e004      	b.n	80003b2 <fsm_automatic+0xf2>
		break;
 80003a8:	bf00      	nop
 80003aa:	e002      	b.n	80003b2 <fsm_automatic+0xf2>
		break;
 80003ac:	bf00      	nop
 80003ae:	e000      	b.n	80003b2 <fsm_automatic+0xf2>
		break;
 80003b0:	bf00      	nop

	}
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	2000008c 	.word	0x2000008c
 80003bc:	2000004c 	.word	0x2000004c
 80003c0:	20000114 	.word	0x20000114
 80003c4:	20000050 	.word	0x20000050

080003c8 <display_modetemp>:
 *      Author: dangq
 */

#include "fsm_manual.h"

void display_modetemp(int temp){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	switch(num){
 80003d0:	4b35      	ldr	r3, [pc, #212]	@ (80004a8 <display_modetemp+0xe0>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d030      	beq.n	800043a <display_modetemp+0x72>
 80003d8:	2b02      	cmp	r3, #2
 80003da:	dc5b      	bgt.n	8000494 <display_modetemp+0xcc>
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d002      	beq.n	80003e6 <display_modetemp+0x1e>
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d007      	beq.n	80003f4 <display_modetemp+0x2c>
			setTimer5(50);
			num = 1;
		}
		break;
	default:
		break;
 80003e4:	e056      	b.n	8000494 <display_modetemp+0xcc>
		num = 1;
 80003e6:	4b30      	ldr	r3, [pc, #192]	@ (80004a8 <display_modetemp+0xe0>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	601a      	str	r2, [r3, #0]
		setTimer5(50);
 80003ec:	2032      	movs	r0, #50	@ 0x32
 80003ee:	f001 fb81 	bl	8001af4 <setTimer5>
		break;
 80003f2:	e054      	b.n	800049e <display_modetemp+0xd6>
		setEN(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fadd 	bl	80009b4 <setEN>
		display7SEG1(mode/10);
 80003fa:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <display_modetemp+0xe4>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a2c      	ldr	r2, [pc, #176]	@ (80004b0 <display_modetemp+0xe8>)
 8000400:	fb82 1203 	smull	r1, r2, r2, r3
 8000404:	1092      	asrs	r2, r2, #2
 8000406:	17db      	asrs	r3, r3, #31
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	4618      	mov	r0, r3
 800040c:	f000 fce0 	bl	8000dd0 <display7SEG1>
		display7SEG2(temp/10);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a27      	ldr	r2, [pc, #156]	@ (80004b0 <display_modetemp+0xe8>)
 8000414:	fb82 1203 	smull	r1, r2, r2, r3
 8000418:	1092      	asrs	r2, r2, #2
 800041a:	17db      	asrs	r3, r3, #31
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fb0c 	bl	8000a3c <display7SEG2>
		if(timer5_flag == 1){
 8000424:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <display_modetemp+0xec>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d135      	bne.n	8000498 <display_modetemp+0xd0>
			setTimer5(50);
 800042c:	2032      	movs	r0, #50	@ 0x32
 800042e:	f001 fb61 	bl	8001af4 <setTimer5>
			num = 2;
 8000432:	4b1d      	ldr	r3, [pc, #116]	@ (80004a8 <display_modetemp+0xe0>)
 8000434:	2202      	movs	r2, #2
 8000436:	601a      	str	r2, [r3, #0]
		break;
 8000438:	e02e      	b.n	8000498 <display_modetemp+0xd0>
		setEN(2);
 800043a:	2002      	movs	r0, #2
 800043c:	f000 faba 	bl	80009b4 <setEN>
		display7SEG1(mode%10);
 8000440:	4b1a      	ldr	r3, [pc, #104]	@ (80004ac <display_modetemp+0xe4>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <display_modetemp+0xe8>)
 8000446:	fb83 1302 	smull	r1, r3, r3, r2
 800044a:	1099      	asrs	r1, r3, #2
 800044c:	17d3      	asrs	r3, r2, #31
 800044e:	1ac9      	subs	r1, r1, r3
 8000450:	460b      	mov	r3, r1
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	440b      	add	r3, r1
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	1ad1      	subs	r1, r2, r3
 800045a:	4608      	mov	r0, r1
 800045c:	f000 fcb8 	bl	8000dd0 <display7SEG1>
		display7SEG2(temp%10);
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <display_modetemp+0xe8>)
 8000464:	fb83 1302 	smull	r1, r3, r3, r2
 8000468:	1099      	asrs	r1, r3, #2
 800046a:	17d3      	asrs	r3, r2, #31
 800046c:	1ac9      	subs	r1, r1, r3
 800046e:	460b      	mov	r3, r1
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	440b      	add	r3, r1
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	1ad1      	subs	r1, r2, r3
 8000478:	4608      	mov	r0, r1
 800047a:	f000 fadf 	bl	8000a3c <display7SEG2>
		if(timer5_flag == 1){
 800047e:	4b0d      	ldr	r3, [pc, #52]	@ (80004b4 <display_modetemp+0xec>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d10a      	bne.n	800049c <display_modetemp+0xd4>
			setTimer5(50);
 8000486:	2032      	movs	r0, #50	@ 0x32
 8000488:	f001 fb34 	bl	8001af4 <setTimer5>
			num = 1;
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <display_modetemp+0xe0>)
 800048e:	2201      	movs	r2, #1
 8000490:	601a      	str	r2, [r3, #0]
		break;
 8000492:	e003      	b.n	800049c <display_modetemp+0xd4>
		break;
 8000494:	bf00      	nop
 8000496:	e002      	b.n	800049e <display_modetemp+0xd6>
		break;
 8000498:	bf00      	nop
 800049a:	e000      	b.n	800049e <display_modetemp+0xd6>
		break;
 800049c:	bf00      	nop

	}
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000ac 	.word	0x200000ac
 80004ac:	20000054 	.word	0x20000054
 80004b0:	66666667 	.word	0x66666667
 80004b4:	2000012c 	.word	0x2000012c

080004b8 <fsm_manual>:

void fsm_manual(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	switch (mode){
 80004bc:	4b8a      	ldr	r3, [pc, #552]	@ (80006e8 <fsm_manual+0x230>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	2b03      	cmp	r3, #3
 80004c4:	f200 81a5 	bhi.w	8000812 <fsm_manual+0x35a>
 80004c8:	a201      	add	r2, pc, #4	@ (adr r2, 80004d0 <fsm_manual+0x18>)
 80004ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ce:	bf00      	nop
 80004d0:	080004e1 	.word	0x080004e1
 80004d4:	08000501 	.word	0x08000501
 80004d8:	080005eb 	.word	0x080005eb
 80004dc:	08000711 	.word	0x08000711
	case MODE1:
		fsm_automatic();
 80004e0:	f7ff feee 	bl	80002c0 <fsm_automatic>
		if(isButtonPressed(0)==1){
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff fe31 	bl	800014c <isButtonPressed>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	f040 8192 	bne.w	8000816 <fsm_manual+0x35e>
			mode = MODE2;
 80004f2:	4b7d      	ldr	r3, [pc, #500]	@ (80006e8 <fsm_manual+0x230>)
 80004f4:	2202      	movs	r2, #2
 80004f6:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 80004f8:	2019      	movs	r0, #25
 80004fa:	f001 fae7 	bl	8001acc <setTimer4>
		}
		break;
 80004fe:	e18a      	b.n	8000816 <fsm_manual+0x35e>
	case MODE2:
		display_modetemp(temp_RED);
 8000500:	4b7a      	ldr	r3, [pc, #488]	@ (80006ec <fsm_manual+0x234>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff5f 	bl	80003c8 <display_modetemp>
		if(timer4_flag == 1){
 800050a:	4b79      	ldr	r3, [pc, #484]	@ (80006f0 <fsm_manual+0x238>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d11f      	bne.n	8000552 <fsm_manual+0x9a>
			HAL_GPIO_TogglePin(GPIOA,LED_RED1);
 8000512:	2104      	movs	r1, #4
 8000514:	4877      	ldr	r0, [pc, #476]	@ (80006f4 <fsm_manual+0x23c>)
 8000516:	f002 f85e 	bl	80025d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,LED_RED2);
 800051a:	2140      	movs	r1, #64	@ 0x40
 800051c:	4875      	ldr	r0, [pc, #468]	@ (80006f4 <fsm_manual+0x23c>)
 800051e:	f002 f85a 	bl	80025d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2108      	movs	r1, #8
 8000526:	4873      	ldr	r0, [pc, #460]	@ (80006f4 <fsm_manual+0x23c>)
 8000528:	f002 f83d 	bl	80025a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2180      	movs	r1, #128	@ 0x80
 8000530:	4870      	ldr	r0, [pc, #448]	@ (80006f4 <fsm_manual+0x23c>)
 8000532:	f002 f838 	bl	80025a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2110      	movs	r1, #16
 800053a:	486e      	ldr	r0, [pc, #440]	@ (80006f4 <fsm_manual+0x23c>)
 800053c:	f002 f833 	bl	80025a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000546:	486b      	ldr	r0, [pc, #428]	@ (80006f4 <fsm_manual+0x23c>)
 8000548:	f002 f82d 	bl	80025a6 <HAL_GPIO_WritePin>
			setTimer4(25);
 800054c:	2019      	movs	r0, #25
 800054e:	f001 fabd 	bl	8001acc <setTimer4>
		}

		if(isButtonPressed(0)==1){
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff fdfa 	bl	800014c <isButtonPressed>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d108      	bne.n	8000570 <fsm_manual+0xb8>
			mode = MODE3;
 800055e:	4b62      	ldr	r3, [pc, #392]	@ (80006e8 <fsm_manual+0x230>)
 8000560:	2203      	movs	r2, #3
 8000562:	601a      	str	r2, [r3, #0]
			temp_RED =0;
 8000564:	4b61      	ldr	r3, [pc, #388]	@ (80006ec <fsm_manual+0x234>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 800056a:	2019      	movs	r0, #25
 800056c:	f001 faae 	bl	8001acc <setTimer4>
		}

		if(isButtonPressed(1)==1){
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff fdeb 	bl	800014c <isButtonPressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10b      	bne.n	8000594 <fsm_manual+0xdc>
			temp_RED++;
 800057c:	4b5b      	ldr	r3, [pc, #364]	@ (80006ec <fsm_manual+0x234>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a5a      	ldr	r2, [pc, #360]	@ (80006ec <fsm_manual+0x234>)
 8000584:	6013      	str	r3, [r2, #0]
			if(temp_RED >99){
 8000586:	4b59      	ldr	r3, [pc, #356]	@ (80006ec <fsm_manual+0x234>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b63      	cmp	r3, #99	@ 0x63
 800058c:	dd02      	ble.n	8000594 <fsm_manual+0xdc>
				temp_RED = 0;
 800058e:	4b57      	ldr	r3, [pc, #348]	@ (80006ec <fsm_manual+0x234>)
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(2)== 1){
 8000594:	2002      	movs	r0, #2
 8000596:	f7ff fdd9 	bl	800014c <isButtonPressed>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	f040 813c 	bne.w	800081a <fsm_manual+0x362>
			if(temp_RED <= YELLOW_TIME){
 80005a2:	4b52      	ldr	r3, [pc, #328]	@ (80006ec <fsm_manual+0x234>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b54      	ldr	r3, [pc, #336]	@ (80006f8 <fsm_manual+0x240>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	dc03      	bgt.n	80005b6 <fsm_manual+0xfe>
				temp_RED =RED_TIME;
 80005ae:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <fsm_manual+0x244>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a4e      	ldr	r2, [pc, #312]	@ (80006ec <fsm_manual+0x234>)
 80005b4:	6013      	str	r3, [r2, #0]
			}
			RED_TIME = temp_RED;
 80005b6:	4b4d      	ldr	r3, [pc, #308]	@ (80006ec <fsm_manual+0x234>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a50      	ldr	r2, [pc, #320]	@ (80006fc <fsm_manual+0x244>)
 80005bc:	6013      	str	r3, [r2, #0]
			GREEN_TIME = RED_TIME - YELLOW_TIME;
 80005be:	4b4f      	ldr	r3, [pc, #316]	@ (80006fc <fsm_manual+0x244>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	4b4d      	ldr	r3, [pc, #308]	@ (80006f8 <fsm_manual+0x240>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	4a4d      	ldr	r2, [pc, #308]	@ (8000700 <fsm_manual+0x248>)
 80005ca:	6013      	str	r3, [r2, #0]
			temp_RED =0;
 80005cc:	4b47      	ldr	r3, [pc, #284]	@ (80006ec <fsm_manual+0x234>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
			initLedBuffer();
 80005d2:	f000 f93b 	bl	800084c <initLedBuffer>
			status =0;
 80005d6:	4b4b      	ldr	r3, [pc, #300]	@ (8000704 <fsm_manual+0x24c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
			num_EN =0;
 80005dc:	4b4a      	ldr	r3, [pc, #296]	@ (8000708 <fsm_manual+0x250>)
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 80005e2:	4b41      	ldr	r3, [pc, #260]	@ (80006e8 <fsm_manual+0x230>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
		}
		break;
 80005e8:	e117      	b.n	800081a <fsm_manual+0x362>

	case MODE3:
		display_modetemp(temp_GREEN);
 80005ea:	4b48      	ldr	r3, [pc, #288]	@ (800070c <fsm_manual+0x254>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff feea 	bl	80003c8 <display_modetemp>
		if(timer4_flag == 1){
 80005f4:	4b3e      	ldr	r3, [pc, #248]	@ (80006f0 <fsm_manual+0x238>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d11f      	bne.n	800063c <fsm_manual+0x184>
			HAL_GPIO_TogglePin(GPIOA,LED_GREEN1);
 80005fc:	2108      	movs	r1, #8
 80005fe:	483d      	ldr	r0, [pc, #244]	@ (80006f4 <fsm_manual+0x23c>)
 8000600:	f001 ffe9 	bl	80025d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,LED_GREEN2);
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	483b      	ldr	r0, [pc, #236]	@ (80006f4 <fsm_manual+0x23c>)
 8000608:	f001 ffe5 	bl	80025d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2104      	movs	r1, #4
 8000610:	4838      	ldr	r0, [pc, #224]	@ (80006f4 <fsm_manual+0x23c>)
 8000612:	f001 ffc8 	bl	80025a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2140      	movs	r1, #64	@ 0x40
 800061a:	4836      	ldr	r0, [pc, #216]	@ (80006f4 <fsm_manual+0x23c>)
 800061c:	f001 ffc3 	bl	80025a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2110      	movs	r1, #16
 8000624:	4833      	ldr	r0, [pc, #204]	@ (80006f4 <fsm_manual+0x23c>)
 8000626:	f001 ffbe 	bl	80025a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000630:	4830      	ldr	r0, [pc, #192]	@ (80006f4 <fsm_manual+0x23c>)
 8000632:	f001 ffb8 	bl	80025a6 <HAL_GPIO_WritePin>
			setTimer4(25);
 8000636:	2019      	movs	r0, #25
 8000638:	f001 fa48 	bl	8001acc <setTimer4>
		}

		if(isButtonPressed(0)==1){
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff fd85 	bl	800014c <isButtonPressed>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	d108      	bne.n	800065a <fsm_manual+0x1a2>
			mode = MODE4;
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <fsm_manual+0x230>)
 800064a:	2204      	movs	r2, #4
 800064c:	601a      	str	r2, [r3, #0]
			temp_GREEN =0;
 800064e:	4b2f      	ldr	r3, [pc, #188]	@ (800070c <fsm_manual+0x254>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
			setTimer4(25);
 8000654:	2019      	movs	r0, #25
 8000656:	f001 fa39 	bl	8001acc <setTimer4>
		}

		if(isButtonPressed(1)==1){
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff fd76 	bl	800014c <isButtonPressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d10b      	bne.n	800067e <fsm_manual+0x1c6>
			temp_GREEN++;
 8000666:	4b29      	ldr	r3, [pc, #164]	@ (800070c <fsm_manual+0x254>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a27      	ldr	r2, [pc, #156]	@ (800070c <fsm_manual+0x254>)
 800066e:	6013      	str	r3, [r2, #0]
			if(temp_GREEN >98){
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <fsm_manual+0x254>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b62      	cmp	r3, #98	@ 0x62
 8000676:	dd02      	ble.n	800067e <fsm_manual+0x1c6>
				temp_GREEN = 0;
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <fsm_manual+0x254>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(2)== 1 && temp_GREEN !=0){
 800067e:	2002      	movs	r0, #2
 8000680:	f7ff fd64 	bl	800014c <isButtonPressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	f040 80c9 	bne.w	800081e <fsm_manual+0x366>
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <fsm_manual+0x254>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 80c4 	beq.w	800081e <fsm_manual+0x366>
			GREEN_TIME = temp_GREEN;
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <fsm_manual+0x254>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a19      	ldr	r2, [pc, #100]	@ (8000700 <fsm_manual+0x248>)
 800069c:	6013      	str	r3, [r2, #0]
			RED_TIME = YELLOW_TIME + GREEN_TIME;
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <fsm_manual+0x240>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <fsm_manual+0x248>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <fsm_manual+0x244>)
 80006aa:	6013      	str	r3, [r2, #0]
			temp_GREEN =0;
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <fsm_manual+0x254>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
			if(RED_TIME >99){
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <fsm_manual+0x244>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b63      	cmp	r3, #99	@ 0x63
 80006b8:	dd09      	ble.n	80006ce <fsm_manual+0x216>
				RED_TIME = 99;
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <fsm_manual+0x244>)
 80006bc:	2263      	movs	r2, #99	@ 0x63
 80006be:	601a      	str	r2, [r3, #0]
				YELLOW_TIME = RED_TIME - GREEN_TIME;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <fsm_manual+0x244>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <fsm_manual+0x248>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	4a0b      	ldr	r2, [pc, #44]	@ (80006f8 <fsm_manual+0x240>)
 80006cc:	6013      	str	r3, [r2, #0]
			}
			initLedBuffer();
 80006ce:	f000 f8bd 	bl	800084c <initLedBuffer>
			status=0;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <fsm_manual+0x24c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			num_EN =0;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <fsm_manual+0x250>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 80006de:	4b02      	ldr	r3, [pc, #8]	@ (80006e8 <fsm_manual+0x230>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
		}
		break;
 80006e4:	e09b      	b.n	800081e <fsm_manual+0x366>
 80006e6:	bf00      	nop
 80006e8:	20000054 	.word	0x20000054
 80006ec:	200000b0 	.word	0x200000b0
 80006f0:	20000124 	.word	0x20000124
 80006f4:	40010800 	.word	0x40010800
 80006f8:	20000050 	.word	0x20000050
 80006fc:	20000048 	.word	0x20000048
 8000700:	2000004c 	.word	0x2000004c
 8000704:	2000008c 	.word	0x2000008c
 8000708:	20000090 	.word	0x20000090
 800070c:	200000b4 	.word	0x200000b4

	case MODE4:
		display_modetemp(temp_YELLOW);
 8000710:	4b45      	ldr	r3, [pc, #276]	@ (8000828 <fsm_manual+0x370>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fe57 	bl	80003c8 <display_modetemp>
		if(timer4_flag == 1){
 800071a:	4b44      	ldr	r3, [pc, #272]	@ (800082c <fsm_manual+0x374>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d11f      	bne.n	8000762 <fsm_manual+0x2aa>
			HAL_GPIO_TogglePin(GPIOA,LED_YELLOW1);
 8000722:	2110      	movs	r1, #16
 8000724:	4842      	ldr	r0, [pc, #264]	@ (8000830 <fsm_manual+0x378>)
 8000726:	f001 ff56 	bl	80025d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,LED_YELLOW2);
 800072a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072e:	4840      	ldr	r0, [pc, #256]	@ (8000830 <fsm_manual+0x378>)
 8000730:	f001 ff51 	bl	80025d6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2108      	movs	r1, #8
 8000738:	483d      	ldr	r0, [pc, #244]	@ (8000830 <fsm_manual+0x378>)
 800073a:	f001 ff34 	bl	80025a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	483b      	ldr	r0, [pc, #236]	@ (8000830 <fsm_manual+0x378>)
 8000744:	f001 ff2f 	bl	80025a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2104      	movs	r1, #4
 800074c:	4838      	ldr	r0, [pc, #224]	@ (8000830 <fsm_manual+0x378>)
 800074e:	f001 ff2a 	bl	80025a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2140      	movs	r1, #64	@ 0x40
 8000756:	4836      	ldr	r0, [pc, #216]	@ (8000830 <fsm_manual+0x378>)
 8000758:	f001 ff25 	bl	80025a6 <HAL_GPIO_WritePin>
			setTimer4(25);
 800075c:	2019      	movs	r0, #25
 800075e:	f001 f9b5 	bl	8001acc <setTimer4>
		}

		if(isButtonPressed(0)==1){
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fcf2 	bl	800014c <isButtonPressed>
 8000768:	4603      	mov	r3, r0
 800076a:	2b01      	cmp	r3, #1
 800076c:	d10d      	bne.n	800078a <fsm_manual+0x2d2>
			temp_YELLOW =0;
 800076e:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <fsm_manual+0x370>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 8000774:	4b2f      	ldr	r3, [pc, #188]	@ (8000834 <fsm_manual+0x37c>)
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
			initLedBuffer();
 800077a:	f000 f867 	bl	800084c <initLedBuffer>
			status =0;
 800077e:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <fsm_manual+0x380>)
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
			num_EN =0;
 8000784:	4b2d      	ldr	r3, [pc, #180]	@ (800083c <fsm_manual+0x384>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)==1){
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff fcde 	bl	800014c <isButtonPressed>
 8000790:	4603      	mov	r3, r0
 8000792:	2b01      	cmp	r3, #1
 8000794:	d10b      	bne.n	80007ae <fsm_manual+0x2f6>
			temp_YELLOW++;
 8000796:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <fsm_manual+0x370>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a22      	ldr	r2, [pc, #136]	@ (8000828 <fsm_manual+0x370>)
 800079e:	6013      	str	r3, [r2, #0]
			if(temp_YELLOW > 98){
 80007a0:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <fsm_manual+0x370>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b62      	cmp	r3, #98	@ 0x62
 80007a6:	dd02      	ble.n	80007ae <fsm_manual+0x2f6>
				temp_YELLOW = 0;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <fsm_manual+0x370>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
			}
		}

		if(isButtonPressed(2)== 1 && temp_YELLOW != 0){
 80007ae:	2002      	movs	r0, #2
 80007b0:	f7ff fccc 	bl	800014c <isButtonPressed>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d133      	bne.n	8000822 <fsm_manual+0x36a>
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <fsm_manual+0x370>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d02f      	beq.n	8000822 <fsm_manual+0x36a>
			YELLOW_TIME = temp_YELLOW;
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <fsm_manual+0x370>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000840 <fsm_manual+0x388>)
 80007c8:	6013      	str	r3, [r2, #0]
			temp_YELLOW =0;
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <fsm_manual+0x370>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
			RED_TIME=GREEN_TIME + YELLOW_TIME;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <fsm_manual+0x38c>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000840 <fsm_manual+0x388>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4413      	add	r3, r2
 80007da:	4a1b      	ldr	r2, [pc, #108]	@ (8000848 <fsm_manual+0x390>)
 80007dc:	6013      	str	r3, [r2, #0]
			if(RED_TIME >99){
 80007de:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <fsm_manual+0x390>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b63      	cmp	r3, #99	@ 0x63
 80007e4:	dd09      	ble.n	80007fa <fsm_manual+0x342>
				RED_TIME = 99;
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <fsm_manual+0x390>)
 80007e8:	2263      	movs	r2, #99	@ 0x63
 80007ea:	601a      	str	r2, [r3, #0]
				GREEN_TIME = RED_TIME -YELLOW_TIME;
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <fsm_manual+0x390>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <fsm_manual+0x388>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	4a13      	ldr	r2, [pc, #76]	@ (8000844 <fsm_manual+0x38c>)
 80007f8:	6013      	str	r3, [r2, #0]
			}
			initLedBuffer();
 80007fa:	f000 f827 	bl	800084c <initLedBuffer>
			status =0;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <fsm_manual+0x380>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
			num_EN =0;
 8000804:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <fsm_manual+0x384>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
			mode = MODE1;
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <fsm_manual+0x37c>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000810:	e007      	b.n	8000822 <fsm_manual+0x36a>

	default:
		break;
 8000812:	bf00      	nop
 8000814:	e006      	b.n	8000824 <fsm_manual+0x36c>
		break;
 8000816:	bf00      	nop
 8000818:	e004      	b.n	8000824 <fsm_manual+0x36c>
		break;
 800081a:	bf00      	nop
 800081c:	e002      	b.n	8000824 <fsm_manual+0x36c>
		break;
 800081e:	bf00      	nop
 8000820:	e000      	b.n	8000824 <fsm_manual+0x36c>
		break;
 8000822:	bf00      	nop
	}

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000b8 	.word	0x200000b8
 800082c:	20000124 	.word	0x20000124
 8000830:	40010800 	.word	0x40010800
 8000834:	20000054 	.word	0x20000054
 8000838:	2000008c 	.word	0x2000008c
 800083c:	20000090 	.word	0x20000090
 8000840:	20000050 	.word	0x20000050
 8000844:	2000004c 	.word	0x2000004c
 8000848:	20000048 	.word	0x20000048

0800084c <initLedBuffer>:

int temp_RED = 0;
int temp_GREEN =0;
int temp_YELLOW = 0;

void initLedBuffer() {
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	Led_buffer[0] = RED_TIME/10;
 8000850:	4b27      	ldr	r3, [pc, #156]	@ (80008f0 <initLedBuffer+0xa4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a27      	ldr	r2, [pc, #156]	@ (80008f4 <initLedBuffer+0xa8>)
 8000856:	fb82 1203 	smull	r1, r2, r2, r3
 800085a:	1092      	asrs	r2, r2, #2
 800085c:	17db      	asrs	r3, r3, #31
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <initLedBuffer+0xac>)
 8000862:	6013      	str	r3, [r2, #0]
	Led_buffer[1] = RED_TIME%10;
 8000864:	4b22      	ldr	r3, [pc, #136]	@ (80008f0 <initLedBuffer+0xa4>)
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <initLedBuffer+0xa8>)
 800086a:	fb83 2301 	smull	r2, r3, r3, r1
 800086e:	109a      	asrs	r2, r3, #2
 8000870:	17cb      	asrs	r3, r1, #31
 8000872:	1ad2      	subs	r2, r2, r3
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	1aca      	subs	r2, r1, r3
 800087e:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <initLedBuffer+0xac>)
 8000880:	605a      	str	r2, [r3, #4]
	Led_buffer[2] = GREEN_TIME/10;
 8000882:	4b1e      	ldr	r3, [pc, #120]	@ (80008fc <initLedBuffer+0xb0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <initLedBuffer+0xa8>)
 8000888:	fb82 1203 	smull	r1, r2, r2, r3
 800088c:	1092      	asrs	r2, r2, #2
 800088e:	17db      	asrs	r3, r3, #31
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	4a19      	ldr	r2, [pc, #100]	@ (80008f8 <initLedBuffer+0xac>)
 8000894:	6093      	str	r3, [r2, #8]
	Led_buffer[3] = GREEN_TIME%10;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <initLedBuffer+0xb0>)
 8000898:	6819      	ldr	r1, [r3, #0]
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <initLedBuffer+0xa8>)
 800089c:	fb83 2301 	smull	r2, r3, r3, r1
 80008a0:	109a      	asrs	r2, r3, #2
 80008a2:	17cb      	asrs	r3, r1, #31
 80008a4:	1ad2      	subs	r2, r2, r3
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	1aca      	subs	r2, r1, r3
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <initLedBuffer+0xac>)
 80008b2:	60da      	str	r2, [r3, #12]
	Led_buffer[4] = YELLOW_TIME/10;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <initLedBuffer+0xb4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <initLedBuffer+0xa8>)
 80008ba:	fb82 1203 	smull	r1, r2, r2, r3
 80008be:	1092      	asrs	r2, r2, #2
 80008c0:	17db      	asrs	r3, r3, #31
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <initLedBuffer+0xac>)
 80008c6:	6113      	str	r3, [r2, #16]
	Led_buffer[5] = YELLOW_TIME%10;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <initLedBuffer+0xb4>)
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <initLedBuffer+0xa8>)
 80008ce:	fb83 2301 	smull	r2, r3, r3, r1
 80008d2:	109a      	asrs	r2, r3, #2
 80008d4:	17cb      	asrs	r3, r1, #31
 80008d6:	1ad2      	subs	r2, r2, r3
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	1aca      	subs	r2, r1, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <initLedBuffer+0xac>)
 80008e4:	615a      	str	r2, [r3, #20]
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000048 	.word	0x20000048
 80008f4:	66666667 	.word	0x66666667
 80008f8:	20000094 	.word	0x20000094
 80008fc:	2000004c 	.word	0x2000004c
 8000900:	20000050 	.word	0x20000050

08000904 <Lab3_Init>:





void Lab3_Init(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
    // Kích hoạt xung nhịp cho GPIOA và GPIOB
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <Lab3_Init+0xa4>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a26      	ldr	r2, [pc, #152]	@ (80009a8 <Lab3_Init+0xa4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b24      	ldr	r3, [pc, #144]	@ (80009a8 <Lab3_Init+0xa4>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <Lab3_Init+0xa4>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a20      	ldr	r2, [pc, #128]	@ (80009a8 <Lab3_Init+0xa4>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <Lab3_Init+0xa4>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]

    // Cấu hình GPIO cho các đèn LED và EN trên cổng A
		GPIO_InitStruct.Pin = LED_RED | LED_RED1 | LED_RED2 | LED_GREEN1 | LED_GREEN2 | LED_YELLOW1 | LED_YELLOW2
 8000948:	f24f 13fc 	movw	r3, #61948	@ 0xf1fc
 800094c:	60bb      	str	r3, [r7, #8]
							  | EN_0 | EN_1 | EN_2 | EN_3;
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2302      	movs	r3, #2
 8000958:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4619      	mov	r1, r3
 8000960:	4812      	ldr	r0, [pc, #72]	@ (80009ac <Lab3_Init+0xa8>)
 8000962:	f001 fc8d 	bl	8002280 <HAL_GPIO_Init>

    // Cấu hình GPIO cho các nút bấm (BUTTON) trên cổng A
		GPIO_InitStruct.Pin = BUTTON0 | BUTTON1 | BUTTON2;
 8000966:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 800096a:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_PULLUP;  // Kéo lên nội bộ
 8000970:	2301      	movs	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
		// Không cần đặt lại tốc độ khi dùng chế độ INPUT
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4619      	mov	r1, r3
 800097a:	480c      	ldr	r0, [pc, #48]	@ (80009ac <Lab3_Init+0xa8>)
 800097c:	f001 fc80 	bl	8002280 <HAL_GPIO_Init>

    // Cấu hình GPIO cho các SEG1ment của 7 đoạn (SEG1) trên cổng B
		GPIO_InitStruct.Pin = SEG1_0 | SEG1_1 | SEG1_2 | SEG1_3 | SEG1_4 | SEG1_5 | SEG1_6|
 8000980:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000984:	60bb      	str	r3, [r7, #8]
				SEG2_0 | SEG2_1 | SEG2_2 | SEG2_3 | SEG2_4 | SEG2_5 | SEG2_6;

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2302      	movs	r3, #2
 8000990:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <Lab3_Init+0xac>)
 800099a:	f001 fc71 	bl	8002280 <HAL_GPIO_Init>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	40010c00 	.word	0x40010c00

080009b4 <setEN>:
 */

#include "led7_segment.h"


void setEN(int num){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	switch(num){
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d003      	beq.n	80009ca <setEN+0x16>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d019      	beq.n	80009fc <setEN+0x48>
//		HAL_GPIO_WritePin(GPIOA, EN_0, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA, EN_1, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA, EN_2, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA, EN_3, GPIO_PIN_RESET);
	}
}
 80009c8:	e031      	b.n	8000a2e <setEN+0x7a>
		HAL_GPIO_WritePin(GPIOA, EN_0, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009d0:	4819      	ldr	r0, [pc, #100]	@ (8000a38 <setEN+0x84>)
 80009d2:	f001 fde8 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_1, GPIO_PIN_SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009dc:	4816      	ldr	r0, [pc, #88]	@ (8000a38 <setEN+0x84>)
 80009de:	f001 fde2 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_2, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e8:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <setEN+0x84>)
 80009ea:	f001 fddc 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_3, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009f4:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <setEN+0x84>)
 80009f6:	f001 fdd6 	bl	80025a6 <HAL_GPIO_WritePin>
		break;
 80009fa:	e018      	b.n	8000a2e <setEN+0x7a>
		HAL_GPIO_WritePin(GPIOA, EN_0, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a02:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <setEN+0x84>)
 8000a04:	f001 fdcf 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_1, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a0e:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <setEN+0x84>)
 8000a10:	f001 fdc9 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_2, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a1a:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <setEN+0x84>)
 8000a1c:	f001 fdc3 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN_3, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a26:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <setEN+0x84>)
 8000a28:	f001 fdbd 	bl	80025a6 <HAL_GPIO_WritePin>
		break;
 8000a2c:	bf00      	nop
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010800 	.word	0x40010800

08000a3c <display7SEG2>:

void display7SEG2(int num_SEG2){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	switch (num_SEG2){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b09      	cmp	r3, #9
 8000a48:	f200 81bc 	bhi.w	8000dc4 <display7SEG2+0x388>
 8000a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a54 <display7SEG2+0x18>)
 8000a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a52:	bf00      	nop
 8000a54:	08000a7d 	.word	0x08000a7d
 8000a58:	08000ad1 	.word	0x08000ad1
 8000a5c:	08000b25 	.word	0x08000b25
 8000a60:	08000b79 	.word	0x08000b79
 8000a64:	08000bcd 	.word	0x08000bcd
 8000a68:	08000c21 	.word	0x08000c21
 8000a6c:	08000c75 	.word	0x08000c75
 8000a70:	08000cc9 	.word	0x08000cc9
 8000a74:	08000d1d 	.word	0x08000d1d
 8000a78:	08000d71 	.word	0x08000d71
		case 0:
				HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	48d2      	ldr	r0, [pc, #840]	@ (8000dcc <display7SEG2+0x390>)
 8000a82:	f001 fd90 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a8c:	48cf      	ldr	r0, [pc, #828]	@ (8000dcc <display7SEG2+0x390>)
 8000a8e:	f001 fd8a 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a98:	48cc      	ldr	r0, [pc, #816]	@ (8000dcc <display7SEG2+0x390>)
 8000a9a:	f001 fd84 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aa4:	48c9      	ldr	r0, [pc, #804]	@ (8000dcc <display7SEG2+0x390>)
 8000aa6:	f001 fd7e 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ab0:	48c6      	ldr	r0, [pc, #792]	@ (8000dcc <display7SEG2+0x390>)
 8000ab2:	f001 fd78 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000abc:	48c3      	ldr	r0, [pc, #780]	@ (8000dcc <display7SEG2+0x390>)
 8000abe:	f001 fd72 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac8:	48c0      	ldr	r0, [pc, #768]	@ (8000dcc <display7SEG2+0x390>)
 8000aca:	f001 fd6c 	bl	80025a6 <HAL_GPIO_WritePin>

				break;
 8000ace:	e179      	b.n	8000dc4 <display7SEG2+0x388>
		case 1:
					HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2180      	movs	r1, #128	@ 0x80
 8000ad4:	48bd      	ldr	r0, [pc, #756]	@ (8000dcc <display7SEG2+0x390>)
 8000ad6:	f001 fd66 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ae0:	48ba      	ldr	r0, [pc, #744]	@ (8000dcc <display7SEG2+0x390>)
 8000ae2:	f001 fd60 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aec:	48b7      	ldr	r0, [pc, #732]	@ (8000dcc <display7SEG2+0x390>)
 8000aee:	f001 fd5a 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af8:	48b4      	ldr	r0, [pc, #720]	@ (8000dcc <display7SEG2+0x390>)
 8000afa:	f001 fd54 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b04:	48b1      	ldr	r0, [pc, #708]	@ (8000dcc <display7SEG2+0x390>)
 8000b06:	f001 fd4e 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b10:	48ae      	ldr	r0, [pc, #696]	@ (8000dcc <display7SEG2+0x390>)
 8000b12:	f001 fd48 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b1c:	48ab      	ldr	r0, [pc, #684]	@ (8000dcc <display7SEG2+0x390>)
 8000b1e:	f001 fd42 	bl	80025a6 <HAL_GPIO_WritePin>

				break;
 8000b22:	e14f      	b.n	8000dc4 <display7SEG2+0x388>

		case 2:
					HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	48a8      	ldr	r0, [pc, #672]	@ (8000dcc <display7SEG2+0x390>)
 8000b2a:	f001 fd3c 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b34:	48a5      	ldr	r0, [pc, #660]	@ (8000dcc <display7SEG2+0x390>)
 8000b36:	f001 fd36 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b40:	48a2      	ldr	r0, [pc, #648]	@ (8000dcc <display7SEG2+0x390>)
 8000b42:	f001 fd30 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b4c:	489f      	ldr	r0, [pc, #636]	@ (8000dcc <display7SEG2+0x390>)
 8000b4e:	f001 fd2a 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b58:	489c      	ldr	r0, [pc, #624]	@ (8000dcc <display7SEG2+0x390>)
 8000b5a:	f001 fd24 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b64:	4899      	ldr	r0, [pc, #612]	@ (8000dcc <display7SEG2+0x390>)
 8000b66:	f001 fd1e 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b70:	4896      	ldr	r0, [pc, #600]	@ (8000dcc <display7SEG2+0x390>)
 8000b72:	f001 fd18 	bl	80025a6 <HAL_GPIO_WritePin>

				break;
 8000b76:	e125      	b.n	8000dc4 <display7SEG2+0x388>
		case 3:
					HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2180      	movs	r1, #128	@ 0x80
 8000b7c:	4893      	ldr	r0, [pc, #588]	@ (8000dcc <display7SEG2+0x390>)
 8000b7e:	f001 fd12 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b88:	4890      	ldr	r0, [pc, #576]	@ (8000dcc <display7SEG2+0x390>)
 8000b8a:	f001 fd0c 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b94:	488d      	ldr	r0, [pc, #564]	@ (8000dcc <display7SEG2+0x390>)
 8000b96:	f001 fd06 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba0:	488a      	ldr	r0, [pc, #552]	@ (8000dcc <display7SEG2+0x390>)
 8000ba2:	f001 fd00 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bac:	4887      	ldr	r0, [pc, #540]	@ (8000dcc <display7SEG2+0x390>)
 8000bae:	f001 fcfa 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb8:	4884      	ldr	r0, [pc, #528]	@ (8000dcc <display7SEG2+0x390>)
 8000bba:	f001 fcf4 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc4:	4881      	ldr	r0, [pc, #516]	@ (8000dcc <display7SEG2+0x390>)
 8000bc6:	f001 fcee 	bl	80025a6 <HAL_GPIO_WritePin>

				break;
 8000bca:	e0fb      	b.n	8000dc4 <display7SEG2+0x388>
		case 4:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2180      	movs	r1, #128	@ 0x80
 8000bd0:	487e      	ldr	r0, [pc, #504]	@ (8000dcc <display7SEG2+0x390>)
 8000bd2:	f001 fce8 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bdc:	487b      	ldr	r0, [pc, #492]	@ (8000dcc <display7SEG2+0x390>)
 8000bde:	f001 fce2 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be8:	4878      	ldr	r0, [pc, #480]	@ (8000dcc <display7SEG2+0x390>)
 8000bea:	f001 fcdc 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf4:	4875      	ldr	r0, [pc, #468]	@ (8000dcc <display7SEG2+0x390>)
 8000bf6:	f001 fcd6 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c00:	4872      	ldr	r0, [pc, #456]	@ (8000dcc <display7SEG2+0x390>)
 8000c02:	f001 fcd0 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c0c:	486f      	ldr	r0, [pc, #444]	@ (8000dcc <display7SEG2+0x390>)
 8000c0e:	f001 fcca 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c18:	486c      	ldr	r0, [pc, #432]	@ (8000dcc <display7SEG2+0x390>)
 8000c1a:	f001 fcc4 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8000c1e:	e0d1      	b.n	8000dc4 <display7SEG2+0x388>
		case 5:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2180      	movs	r1, #128	@ 0x80
 8000c24:	4869      	ldr	r0, [pc, #420]	@ (8000dcc <display7SEG2+0x390>)
 8000c26:	f001 fcbe 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c30:	4866      	ldr	r0, [pc, #408]	@ (8000dcc <display7SEG2+0x390>)
 8000c32:	f001 fcb8 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c3c:	4863      	ldr	r0, [pc, #396]	@ (8000dcc <display7SEG2+0x390>)
 8000c3e:	f001 fcb2 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c48:	4860      	ldr	r0, [pc, #384]	@ (8000dcc <display7SEG2+0x390>)
 8000c4a:	f001 fcac 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c54:	485d      	ldr	r0, [pc, #372]	@ (8000dcc <display7SEG2+0x390>)
 8000c56:	f001 fca6 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c60:	485a      	ldr	r0, [pc, #360]	@ (8000dcc <display7SEG2+0x390>)
 8000c62:	f001 fca0 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c6c:	4857      	ldr	r0, [pc, #348]	@ (8000dcc <display7SEG2+0x390>)
 8000c6e:	f001 fc9a 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8000c72:	e0a7      	b.n	8000dc4 <display7SEG2+0x388>
		case 6:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2180      	movs	r1, #128	@ 0x80
 8000c78:	4854      	ldr	r0, [pc, #336]	@ (8000dcc <display7SEG2+0x390>)
 8000c7a:	f001 fc94 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c84:	4851      	ldr	r0, [pc, #324]	@ (8000dcc <display7SEG2+0x390>)
 8000c86:	f001 fc8e 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c90:	484e      	ldr	r0, [pc, #312]	@ (8000dcc <display7SEG2+0x390>)
 8000c92:	f001 fc88 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c9c:	484b      	ldr	r0, [pc, #300]	@ (8000dcc <display7SEG2+0x390>)
 8000c9e:	f001 fc82 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ca8:	4848      	ldr	r0, [pc, #288]	@ (8000dcc <display7SEG2+0x390>)
 8000caa:	f001 fc7c 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb4:	4845      	ldr	r0, [pc, #276]	@ (8000dcc <display7SEG2+0x390>)
 8000cb6:	f001 fc76 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc0:	4842      	ldr	r0, [pc, #264]	@ (8000dcc <display7SEG2+0x390>)
 8000cc2:	f001 fc70 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8000cc6:	e07d      	b.n	8000dc4 <display7SEG2+0x388>
		case 7:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	483f      	ldr	r0, [pc, #252]	@ (8000dcc <display7SEG2+0x390>)
 8000cce:	f001 fc6a 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cd8:	483c      	ldr	r0, [pc, #240]	@ (8000dcc <display7SEG2+0x390>)
 8000cda:	f001 fc64 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ce4:	4839      	ldr	r0, [pc, #228]	@ (8000dcc <display7SEG2+0x390>)
 8000ce6:	f001 fc5e 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cf0:	4836      	ldr	r0, [pc, #216]	@ (8000dcc <display7SEG2+0x390>)
 8000cf2:	f001 fc58 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cfc:	4833      	ldr	r0, [pc, #204]	@ (8000dcc <display7SEG2+0x390>)
 8000cfe:	f001 fc52 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d08:	4830      	ldr	r0, [pc, #192]	@ (8000dcc <display7SEG2+0x390>)
 8000d0a:	f001 fc4c 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d14:	482d      	ldr	r0, [pc, #180]	@ (8000dcc <display7SEG2+0x390>)
 8000d16:	f001 fc46 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8000d1a:	e053      	b.n	8000dc4 <display7SEG2+0x388>
		case 8:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2180      	movs	r1, #128	@ 0x80
 8000d20:	482a      	ldr	r0, [pc, #168]	@ (8000dcc <display7SEG2+0x390>)
 8000d22:	f001 fc40 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d2c:	4827      	ldr	r0, [pc, #156]	@ (8000dcc <display7SEG2+0x390>)
 8000d2e:	f001 fc3a 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d38:	4824      	ldr	r0, [pc, #144]	@ (8000dcc <display7SEG2+0x390>)
 8000d3a:	f001 fc34 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d44:	4821      	ldr	r0, [pc, #132]	@ (8000dcc <display7SEG2+0x390>)
 8000d46:	f001 fc2e 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d50:	481e      	ldr	r0, [pc, #120]	@ (8000dcc <display7SEG2+0x390>)
 8000d52:	f001 fc28 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d5c:	481b      	ldr	r0, [pc, #108]	@ (8000dcc <display7SEG2+0x390>)
 8000d5e:	f001 fc22 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d68:	4818      	ldr	r0, [pc, #96]	@ (8000dcc <display7SEG2+0x390>)
 8000d6a:	f001 fc1c 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8000d6e:	e029      	b.n	8000dc4 <display7SEG2+0x388>
		case 9:
						HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2180      	movs	r1, #128	@ 0x80
 8000d74:	4815      	ldr	r0, [pc, #84]	@ (8000dcc <display7SEG2+0x390>)
 8000d76:	f001 fc16 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d80:	4812      	ldr	r0, [pc, #72]	@ (8000dcc <display7SEG2+0x390>)
 8000d82:	f001 fc10 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8c:	480f      	ldr	r0, [pc, #60]	@ (8000dcc <display7SEG2+0x390>)
 8000d8e:	f001 fc0a 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <display7SEG2+0x390>)
 8000d9a:	f001 fc04 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000da4:	4809      	ldr	r0, [pc, #36]	@ (8000dcc <display7SEG2+0x390>)
 8000da6:	f001 fbfe 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000db0:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <display7SEG2+0x390>)
 8000db2:	f001 fbf8 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dbc:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <display7SEG2+0x390>)
 8000dbe:	f001 fbf2 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8000dc2:	bf00      	nop
	}

}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <display7SEG1>:

void display7SEG1(int num_SEG1){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	switch (num_SEG1){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b09      	cmp	r3, #9
 8000ddc:	f200 8180 	bhi.w	80010e0 <display7SEG1+0x310>
 8000de0:	a201      	add	r2, pc, #4	@ (adr r2, 8000de8 <display7SEG1+0x18>)
 8000de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de6:	bf00      	nop
 8000de8:	08000e11 	.word	0x08000e11
 8000dec:	08000e59 	.word	0x08000e59
 8000df0:	08000ea1 	.word	0x08000ea1
 8000df4:	08000ee9 	.word	0x08000ee9
 8000df8:	08000f31 	.word	0x08000f31
 8000dfc:	08000f79 	.word	0x08000f79
 8000e00:	08000fc1 	.word	0x08000fc1
 8000e04:	08001009 	.word	0x08001009
 8000e08:	08001051 	.word	0x08001051
 8000e0c:	08001099 	.word	0x08001099
		case 0:
				HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2101      	movs	r1, #1
 8000e14:	48b4      	ldr	r0, [pc, #720]	@ (80010e8 <display7SEG1+0x318>)
 8000e16:	f001 fbc6 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	48b2      	ldr	r0, [pc, #712]	@ (80010e8 <display7SEG1+0x318>)
 8000e20:	f001 fbc1 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2104      	movs	r1, #4
 8000e28:	48af      	ldr	r0, [pc, #700]	@ (80010e8 <display7SEG1+0x318>)
 8000e2a:	f001 fbbc 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2108      	movs	r1, #8
 8000e32:	48ad      	ldr	r0, [pc, #692]	@ (80010e8 <display7SEG1+0x318>)
 8000e34:	f001 fbb7 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	48aa      	ldr	r0, [pc, #680]	@ (80010e8 <display7SEG1+0x318>)
 8000e3e:	f001 fbb2 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2120      	movs	r1, #32
 8000e46:	48a8      	ldr	r0, [pc, #672]	@ (80010e8 <display7SEG1+0x318>)
 8000e48:	f001 fbad 	bl	80025a6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2140      	movs	r1, #64	@ 0x40
 8000e50:	48a5      	ldr	r0, [pc, #660]	@ (80010e8 <display7SEG1+0x318>)
 8000e52:	f001 fba8 	bl	80025a6 <HAL_GPIO_WritePin>

				break;
 8000e56:	e143      	b.n	80010e0 <display7SEG1+0x310>
		case 1:
					HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	48a2      	ldr	r0, [pc, #648]	@ (80010e8 <display7SEG1+0x318>)
 8000e5e:	f001 fba2 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2102      	movs	r1, #2
 8000e66:	48a0      	ldr	r0, [pc, #640]	@ (80010e8 <display7SEG1+0x318>)
 8000e68:	f001 fb9d 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2104      	movs	r1, #4
 8000e70:	489d      	ldr	r0, [pc, #628]	@ (80010e8 <display7SEG1+0x318>)
 8000e72:	f001 fb98 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2108      	movs	r1, #8
 8000e7a:	489b      	ldr	r0, [pc, #620]	@ (80010e8 <display7SEG1+0x318>)
 8000e7c:	f001 fb93 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2110      	movs	r1, #16
 8000e84:	4898      	ldr	r0, [pc, #608]	@ (80010e8 <display7SEG1+0x318>)
 8000e86:	f001 fb8e 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	4896      	ldr	r0, [pc, #600]	@ (80010e8 <display7SEG1+0x318>)
 8000e90:	f001 fb89 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2140      	movs	r1, #64	@ 0x40
 8000e98:	4893      	ldr	r0, [pc, #588]	@ (80010e8 <display7SEG1+0x318>)
 8000e9a:	f001 fb84 	bl	80025a6 <HAL_GPIO_WritePin>

				break;
 8000e9e:	e11f      	b.n	80010e0 <display7SEG1+0x310>

		case 2:
					HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4890      	ldr	r0, [pc, #576]	@ (80010e8 <display7SEG1+0x318>)
 8000ea6:	f001 fb7e 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2102      	movs	r1, #2
 8000eae:	488e      	ldr	r0, [pc, #568]	@ (80010e8 <display7SEG1+0x318>)
 8000eb0:	f001 fb79 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	488b      	ldr	r0, [pc, #556]	@ (80010e8 <display7SEG1+0x318>)
 8000eba:	f001 fb74 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2108      	movs	r1, #8
 8000ec2:	4889      	ldr	r0, [pc, #548]	@ (80010e8 <display7SEG1+0x318>)
 8000ec4:	f001 fb6f 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2110      	movs	r1, #16
 8000ecc:	4886      	ldr	r0, [pc, #536]	@ (80010e8 <display7SEG1+0x318>)
 8000ece:	f001 fb6a 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	4884      	ldr	r0, [pc, #528]	@ (80010e8 <display7SEG1+0x318>)
 8000ed8:	f001 fb65 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2140      	movs	r1, #64	@ 0x40
 8000ee0:	4881      	ldr	r0, [pc, #516]	@ (80010e8 <display7SEG1+0x318>)
 8000ee2:	f001 fb60 	bl	80025a6 <HAL_GPIO_WritePin>

				break;
 8000ee6:	e0fb      	b.n	80010e0 <display7SEG1+0x310>
		case 3:
					HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2101      	movs	r1, #1
 8000eec:	487e      	ldr	r0, [pc, #504]	@ (80010e8 <display7SEG1+0x318>)
 8000eee:	f001 fb5a 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	487c      	ldr	r0, [pc, #496]	@ (80010e8 <display7SEG1+0x318>)
 8000ef8:	f001 fb55 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2104      	movs	r1, #4
 8000f00:	4879      	ldr	r0, [pc, #484]	@ (80010e8 <display7SEG1+0x318>)
 8000f02:	f001 fb50 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4877      	ldr	r0, [pc, #476]	@ (80010e8 <display7SEG1+0x318>)
 8000f0c:	f001 fb4b 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2110      	movs	r1, #16
 8000f14:	4874      	ldr	r0, [pc, #464]	@ (80010e8 <display7SEG1+0x318>)
 8000f16:	f001 fb46 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4872      	ldr	r0, [pc, #456]	@ (80010e8 <display7SEG1+0x318>)
 8000f20:	f001 fb41 	bl	80025a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2140      	movs	r1, #64	@ 0x40
 8000f28:	486f      	ldr	r0, [pc, #444]	@ (80010e8 <display7SEG1+0x318>)
 8000f2a:	f001 fb3c 	bl	80025a6 <HAL_GPIO_WritePin>

				break;
 8000f2e:	e0d7      	b.n	80010e0 <display7SEG1+0x310>
		case 4:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2101      	movs	r1, #1
 8000f34:	486c      	ldr	r0, [pc, #432]	@ (80010e8 <display7SEG1+0x318>)
 8000f36:	f001 fb36 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	486a      	ldr	r0, [pc, #424]	@ (80010e8 <display7SEG1+0x318>)
 8000f40:	f001 fb31 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2104      	movs	r1, #4
 8000f48:	4867      	ldr	r0, [pc, #412]	@ (80010e8 <display7SEG1+0x318>)
 8000f4a:	f001 fb2c 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2108      	movs	r1, #8
 8000f52:	4865      	ldr	r0, [pc, #404]	@ (80010e8 <display7SEG1+0x318>)
 8000f54:	f001 fb27 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	4862      	ldr	r0, [pc, #392]	@ (80010e8 <display7SEG1+0x318>)
 8000f5e:	f001 fb22 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2120      	movs	r1, #32
 8000f66:	4860      	ldr	r0, [pc, #384]	@ (80010e8 <display7SEG1+0x318>)
 8000f68:	f001 fb1d 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2140      	movs	r1, #64	@ 0x40
 8000f70:	485d      	ldr	r0, [pc, #372]	@ (80010e8 <display7SEG1+0x318>)
 8000f72:	f001 fb18 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8000f76:	e0b3      	b.n	80010e0 <display7SEG1+0x310>
		case 5:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	485a      	ldr	r0, [pc, #360]	@ (80010e8 <display7SEG1+0x318>)
 8000f7e:	f001 fb12 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2102      	movs	r1, #2
 8000f86:	4858      	ldr	r0, [pc, #352]	@ (80010e8 <display7SEG1+0x318>)
 8000f88:	f001 fb0d 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2104      	movs	r1, #4
 8000f90:	4855      	ldr	r0, [pc, #340]	@ (80010e8 <display7SEG1+0x318>)
 8000f92:	f001 fb08 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2108      	movs	r1, #8
 8000f9a:	4853      	ldr	r0, [pc, #332]	@ (80010e8 <display7SEG1+0x318>)
 8000f9c:	f001 fb03 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4850      	ldr	r0, [pc, #320]	@ (80010e8 <display7SEG1+0x318>)
 8000fa6:	f001 fafe 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2120      	movs	r1, #32
 8000fae:	484e      	ldr	r0, [pc, #312]	@ (80010e8 <display7SEG1+0x318>)
 8000fb0:	f001 faf9 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	@ 0x40
 8000fb8:	484b      	ldr	r0, [pc, #300]	@ (80010e8 <display7SEG1+0x318>)
 8000fba:	f001 faf4 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8000fbe:	e08f      	b.n	80010e0 <display7SEG1+0x310>
		case 6:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4848      	ldr	r0, [pc, #288]	@ (80010e8 <display7SEG1+0x318>)
 8000fc6:	f001 faee 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_SET);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4846      	ldr	r0, [pc, #280]	@ (80010e8 <display7SEG1+0x318>)
 8000fd0:	f001 fae9 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4843      	ldr	r0, [pc, #268]	@ (80010e8 <display7SEG1+0x318>)
 8000fda:	f001 fae4 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4841      	ldr	r0, [pc, #260]	@ (80010e8 <display7SEG1+0x318>)
 8000fe4:	f001 fadf 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2110      	movs	r1, #16
 8000fec:	483e      	ldr	r0, [pc, #248]	@ (80010e8 <display7SEG1+0x318>)
 8000fee:	f001 fada 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	483c      	ldr	r0, [pc, #240]	@ (80010e8 <display7SEG1+0x318>)
 8000ff8:	f001 fad5 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2140      	movs	r1, #64	@ 0x40
 8001000:	4839      	ldr	r0, [pc, #228]	@ (80010e8 <display7SEG1+0x318>)
 8001002:	f001 fad0 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8001006:	e06b      	b.n	80010e0 <display7SEG1+0x310>
		case 7:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2101      	movs	r1, #1
 800100c:	4836      	ldr	r0, [pc, #216]	@ (80010e8 <display7SEG1+0x318>)
 800100e:	f001 faca 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2102      	movs	r1, #2
 8001016:	4834      	ldr	r0, [pc, #208]	@ (80010e8 <display7SEG1+0x318>)
 8001018:	f001 fac5 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2104      	movs	r1, #4
 8001020:	4831      	ldr	r0, [pc, #196]	@ (80010e8 <display7SEG1+0x318>)
 8001022:	f001 fac0 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2108      	movs	r1, #8
 800102a:	482f      	ldr	r0, [pc, #188]	@ (80010e8 <display7SEG1+0x318>)
 800102c:	f001 fabb 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2110      	movs	r1, #16
 8001034:	482c      	ldr	r0, [pc, #176]	@ (80010e8 <display7SEG1+0x318>)
 8001036:	f001 fab6 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2120      	movs	r1, #32
 800103e:	482a      	ldr	r0, [pc, #168]	@ (80010e8 <display7SEG1+0x318>)
 8001040:	f001 fab1 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2140      	movs	r1, #64	@ 0x40
 8001048:	4827      	ldr	r0, [pc, #156]	@ (80010e8 <display7SEG1+0x318>)
 800104a:	f001 faac 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 800104e:	e047      	b.n	80010e0 <display7SEG1+0x310>
		case 8:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2101      	movs	r1, #1
 8001054:	4824      	ldr	r0, [pc, #144]	@ (80010e8 <display7SEG1+0x318>)
 8001056:	f001 faa6 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	4822      	ldr	r0, [pc, #136]	@ (80010e8 <display7SEG1+0x318>)
 8001060:	f001 faa1 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2104      	movs	r1, #4
 8001068:	481f      	ldr	r0, [pc, #124]	@ (80010e8 <display7SEG1+0x318>)
 800106a:	f001 fa9c 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2108      	movs	r1, #8
 8001072:	481d      	ldr	r0, [pc, #116]	@ (80010e8 <display7SEG1+0x318>)
 8001074:	f001 fa97 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2110      	movs	r1, #16
 800107c:	481a      	ldr	r0, [pc, #104]	@ (80010e8 <display7SEG1+0x318>)
 800107e:	f001 fa92 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2120      	movs	r1, #32
 8001086:	4818      	ldr	r0, [pc, #96]	@ (80010e8 <display7SEG1+0x318>)
 8001088:	f001 fa8d 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2140      	movs	r1, #64	@ 0x40
 8001090:	4815      	ldr	r0, [pc, #84]	@ (80010e8 <display7SEG1+0x318>)
 8001092:	f001 fa88 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 8001096:	e023      	b.n	80010e0 <display7SEG1+0x310>
		case 9:
						HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	2101      	movs	r1, #1
 800109c:	4812      	ldr	r0, [pc, #72]	@ (80010e8 <display7SEG1+0x318>)
 800109e:	f001 fa82 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2102      	movs	r1, #2
 80010a6:	4810      	ldr	r0, [pc, #64]	@ (80010e8 <display7SEG1+0x318>)
 80010a8:	f001 fa7d 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2104      	movs	r1, #4
 80010b0:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <display7SEG1+0x318>)
 80010b2:	f001 fa78 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2108      	movs	r1, #8
 80010ba:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <display7SEG1+0x318>)
 80010bc:	f001 fa73 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	4808      	ldr	r0, [pc, #32]	@ (80010e8 <display7SEG1+0x318>)
 80010c6:	f001 fa6e 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2120      	movs	r1, #32
 80010ce:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <display7SEG1+0x318>)
 80010d0:	f001 fa69 	bl	80025a6 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2140      	movs	r1, #64	@ 0x40
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <display7SEG1+0x318>)
 80010da:	f001 fa64 	bl	80025a6 <HAL_GPIO_WritePin>

					break;
 80010de:	bf00      	nop
	}

}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40010c00 	.word	0x40010c00

080010ec <display7SEG_YELLOW_RED>:

void display7SEG_YELLOW_RED(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	switch(num_EN){
 80010f0:	4b71      	ldr	r3, [pc, #452]	@ (80012b8 <display7SEG_YELLOW_RED+0x1cc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	f000 80bb 	beq.w	8001270 <display7SEG_YELLOW_RED+0x184>
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	f300 80da 	bgt.w	80012b4 <display7SEG_YELLOW_RED+0x1c8>
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <display7SEG_YELLOW_RED+0x20>
 8001104:	2b01      	cmp	r3, #1
 8001106:	f000 809b 	beq.w	8001240 <display7SEG_YELLOW_RED+0x154>
					Led_buffer[5]--;
					num_EN =0;
				}
				break;
}
}
 800110a:	e0d3      	b.n	80012b4 <display7SEG_YELLOW_RED+0x1c8>
		if(Led_buffer[1] < 0 && Led_buffer[0] >0){
 800110c:	4b6b      	ldr	r3, [pc, #428]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	da0b      	bge.n	800112c <display7SEG_YELLOW_RED+0x40>
 8001114:	4b69      	ldr	r3, [pc, #420]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	dd07      	ble.n	800112c <display7SEG_YELLOW_RED+0x40>
					Led_buffer[1]=9;
 800111c:	4b67      	ldr	r3, [pc, #412]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 800111e:	2209      	movs	r2, #9
 8001120:	605a      	str	r2, [r3, #4]
					Led_buffer[0]--;
 8001122:	4b66      	ldr	r3, [pc, #408]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3b01      	subs	r3, #1
 8001128:	4a64      	ldr	r2, [pc, #400]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 800112a:	6013      	str	r3, [r2, #0]
		if(Led_buffer[0] == 0 && Led_buffer[1]==0){
 800112c:	4b63      	ldr	r3, [pc, #396]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d11c      	bne.n	800116e <display7SEG_YELLOW_RED+0x82>
 8001134:	4b61      	ldr	r3, [pc, #388]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d118      	bne.n	800116e <display7SEG_YELLOW_RED+0x82>
			Led_buffer[0] = RED_TIME/10;
 800113c:	4b60      	ldr	r3, [pc, #384]	@ (80012c0 <display7SEG_YELLOW_RED+0x1d4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a60      	ldr	r2, [pc, #384]	@ (80012c4 <display7SEG_YELLOW_RED+0x1d8>)
 8001142:	fb82 1203 	smull	r1, r2, r2, r3
 8001146:	1092      	asrs	r2, r2, #2
 8001148:	17db      	asrs	r3, r3, #31
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	4a5b      	ldr	r2, [pc, #364]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 800114e:	6013      	str	r3, [r2, #0]
			Led_buffer[1] = RED_TIME%10;
 8001150:	4b5b      	ldr	r3, [pc, #364]	@ (80012c0 <display7SEG_YELLOW_RED+0x1d4>)
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	4b5b      	ldr	r3, [pc, #364]	@ (80012c4 <display7SEG_YELLOW_RED+0x1d8>)
 8001156:	fb83 2301 	smull	r2, r3, r3, r1
 800115a:	109a      	asrs	r2, r3, #2
 800115c:	17cb      	asrs	r3, r1, #31
 800115e:	1ad2      	subs	r2, r2, r3
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	1aca      	subs	r2, r1, r3
 800116a:	4b54      	ldr	r3, [pc, #336]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 800116c:	605a      	str	r2, [r3, #4]
		if(Led_buffer[3] < 0 && Led_buffer[2] >0){
 800116e:	4b53      	ldr	r3, [pc, #332]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	da0b      	bge.n	800118e <display7SEG_YELLOW_RED+0xa2>
 8001176:	4b51      	ldr	r3, [pc, #324]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	dd07      	ble.n	800118e <display7SEG_YELLOW_RED+0xa2>
					Led_buffer[3]=9;
 800117e:	4b4f      	ldr	r3, [pc, #316]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001180:	2209      	movs	r2, #9
 8001182:	60da      	str	r2, [r3, #12]
					Led_buffer[2]--;
 8001184:	4b4d      	ldr	r3, [pc, #308]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	3b01      	subs	r3, #1
 800118a:	4a4c      	ldr	r2, [pc, #304]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 800118c:	6093      	str	r3, [r2, #8]
		if(Led_buffer[2] == 0 && Led_buffer[3]==0){
 800118e:	4b4b      	ldr	r3, [pc, #300]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d11c      	bne.n	80011d0 <display7SEG_YELLOW_RED+0xe4>
 8001196:	4b49      	ldr	r3, [pc, #292]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d118      	bne.n	80011d0 <display7SEG_YELLOW_RED+0xe4>
			Led_buffer[2] = GREEN_TIME/10;
 800119e:	4b4a      	ldr	r3, [pc, #296]	@ (80012c8 <display7SEG_YELLOW_RED+0x1dc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a48      	ldr	r2, [pc, #288]	@ (80012c4 <display7SEG_YELLOW_RED+0x1d8>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1092      	asrs	r2, r2, #2
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	4a43      	ldr	r2, [pc, #268]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80011b0:	6093      	str	r3, [r2, #8]
			Led_buffer[3] = GREEN_TIME%10;
 80011b2:	4b45      	ldr	r3, [pc, #276]	@ (80012c8 <display7SEG_YELLOW_RED+0x1dc>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	4b43      	ldr	r3, [pc, #268]	@ (80012c4 <display7SEG_YELLOW_RED+0x1d8>)
 80011b8:	fb83 2301 	smull	r2, r3, r3, r1
 80011bc:	109a      	asrs	r2, r3, #2
 80011be:	17cb      	asrs	r3, r1, #31
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	1aca      	subs	r2, r1, r3
 80011cc:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80011ce:	60da      	str	r2, [r3, #12]
		if(Led_buffer[5] < 0 && Led_buffer[4] >0){
 80011d0:	4b3a      	ldr	r3, [pc, #232]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	da0b      	bge.n	80011f0 <display7SEG_YELLOW_RED+0x104>
 80011d8:	4b38      	ldr	r3, [pc, #224]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	dd07      	ble.n	80011f0 <display7SEG_YELLOW_RED+0x104>
					Led_buffer[5]=9;
 80011e0:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	615a      	str	r2, [r3, #20]
					Led_buffer[4]--;
 80011e6:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	4a33      	ldr	r2, [pc, #204]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80011ee:	6113      	str	r3, [r2, #16]
		if(Led_buffer[4] == 0 && Led_buffer[5]==0){
 80011f0:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d11c      	bne.n	8001232 <display7SEG_YELLOW_RED+0x146>
 80011f8:	4b30      	ldr	r3, [pc, #192]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d118      	bne.n	8001232 <display7SEG_YELLOW_RED+0x146>
			Led_buffer[4] = YELLOW_TIME/10;
 8001200:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <display7SEG_YELLOW_RED+0x1e0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2f      	ldr	r2, [pc, #188]	@ (80012c4 <display7SEG_YELLOW_RED+0x1d8>)
 8001206:	fb82 1203 	smull	r1, r2, r2, r3
 800120a:	1092      	asrs	r2, r2, #2
 800120c:	17db      	asrs	r3, r3, #31
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	4a2a      	ldr	r2, [pc, #168]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001212:	6113      	str	r3, [r2, #16]
			Led_buffer[5] = YELLOW_TIME%10;
 8001214:	4b2d      	ldr	r3, [pc, #180]	@ (80012cc <display7SEG_YELLOW_RED+0x1e0>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <display7SEG_YELLOW_RED+0x1d8>)
 800121a:	fb83 2301 	smull	r2, r3, r3, r1
 800121e:	109a      	asrs	r2, r3, #2
 8001220:	17cb      	asrs	r3, r1, #31
 8001222:	1ad2      	subs	r2, r2, r3
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	1aca      	subs	r2, r1, r3
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001230:	615a      	str	r2, [r3, #20]
		setTimer3(50);
 8001232:	2032      	movs	r0, #50	@ 0x32
 8001234:	f000 fc36 	bl	8001aa4 <setTimer3>
		num_EN = 1;
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <display7SEG_YELLOW_RED+0x1cc>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]
		break;
 800123e:	e039      	b.n	80012b4 <display7SEG_YELLOW_RED+0x1c8>
				setEN(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff fbb7 	bl	80009b4 <setEN>
				display7SEG1(Led_buffer[4]);
 8001246:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fdc0 	bl	8000dd0 <display7SEG1>
				display7SEG2(Led_buffer[0]);
 8001250:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fbf1 	bl	8000a3c <display7SEG2>
				if(timer3_flag == 1){
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <display7SEG_YELLOW_RED+0x1e4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d125      	bne.n	80012ae <display7SEG_YELLOW_RED+0x1c2>
					num_EN =2;
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <display7SEG_YELLOW_RED+0x1cc>)
 8001264:	2202      	movs	r2, #2
 8001266:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 8001268:	2032      	movs	r0, #50	@ 0x32
 800126a:	f000 fc1b 	bl	8001aa4 <setTimer3>
				break;
 800126e:	e01e      	b.n	80012ae <display7SEG_YELLOW_RED+0x1c2>
				setEN(2);
 8001270:	2002      	movs	r0, #2
 8001272:	f7ff fb9f 	bl	80009b4 <setEN>
				display7SEG1(Led_buffer[5]);
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fda8 	bl	8000dd0 <display7SEG1>
				display7SEG2(Led_buffer[1]);
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fbd9 	bl	8000a3c <display7SEG2>
				if(timer3_flag == 1){
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <display7SEG_YELLOW_RED+0x1e4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d10f      	bne.n	80012b2 <display7SEG_YELLOW_RED+0x1c6>
					Led_buffer[1]--;
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 800129a:	6053      	str	r3, [r2, #4]
					Led_buffer[5]--;
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <display7SEG_YELLOW_RED+0x1d0>)
 80012a4:	6153      	str	r3, [r2, #20]
					num_EN =0;
 80012a6:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <display7SEG_YELLOW_RED+0x1cc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
				break;
 80012ac:	e001      	b.n	80012b2 <display7SEG_YELLOW_RED+0x1c6>
				break;
 80012ae:	bf00      	nop
 80012b0:	e000      	b.n	80012b4 <display7SEG_YELLOW_RED+0x1c8>
				break;
 80012b2:	bf00      	nop
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000090 	.word	0x20000090
 80012bc:	20000094 	.word	0x20000094
 80012c0:	20000048 	.word	0x20000048
 80012c4:	66666667 	.word	0x66666667
 80012c8:	2000004c 	.word	0x2000004c
 80012cc:	20000050 	.word	0x20000050
 80012d0:	2000011c 	.word	0x2000011c

080012d4 <display7SEG_GREEN_RED>:

void display7SEG_GREEN_RED(){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	switch(num_EN){
 80012d8:	4b71      	ldr	r3, [pc, #452]	@ (80014a0 <display7SEG_GREEN_RED+0x1cc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	f000 80bb 	beq.w	8001458 <display7SEG_GREEN_RED+0x184>
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	f300 80da 	bgt.w	800149c <display7SEG_GREEN_RED+0x1c8>
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <display7SEG_GREEN_RED+0x20>
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	f000 809b 	beq.w	8001428 <display7SEG_GREEN_RED+0x154>
					Led_buffer[3]--;
					num_EN =0;
				}
				break;
}
}
 80012f2:	e0d3      	b.n	800149c <display7SEG_GREEN_RED+0x1c8>
		if(Led_buffer[1] < 0 && Led_buffer[0] >0){
 80012f4:	4b6b      	ldr	r3, [pc, #428]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	da0b      	bge.n	8001314 <display7SEG_GREEN_RED+0x40>
 80012fc:	4b69      	ldr	r3, [pc, #420]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd07      	ble.n	8001314 <display7SEG_GREEN_RED+0x40>
					Led_buffer[1]=9;
 8001304:	4b67      	ldr	r3, [pc, #412]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001306:	2209      	movs	r2, #9
 8001308:	605a      	str	r2, [r3, #4]
					Led_buffer[0]--;
 800130a:	4b66      	ldr	r3, [pc, #408]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	3b01      	subs	r3, #1
 8001310:	4a64      	ldr	r2, [pc, #400]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001312:	6013      	str	r3, [r2, #0]
		if(Led_buffer[0] == 0 && Led_buffer[1]==0){
 8001314:	4b63      	ldr	r3, [pc, #396]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d11c      	bne.n	8001356 <display7SEG_GREEN_RED+0x82>
 800131c:	4b61      	ldr	r3, [pc, #388]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d118      	bne.n	8001356 <display7SEG_GREEN_RED+0x82>
			Led_buffer[0] = RED_TIME/10;
 8001324:	4b60      	ldr	r3, [pc, #384]	@ (80014a8 <display7SEG_GREEN_RED+0x1d4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a60      	ldr	r2, [pc, #384]	@ (80014ac <display7SEG_GREEN_RED+0x1d8>)
 800132a:	fb82 1203 	smull	r1, r2, r2, r3
 800132e:	1092      	asrs	r2, r2, #2
 8001330:	17db      	asrs	r3, r3, #31
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	4a5b      	ldr	r2, [pc, #364]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001336:	6013      	str	r3, [r2, #0]
			Led_buffer[1] = RED_TIME%10;
 8001338:	4b5b      	ldr	r3, [pc, #364]	@ (80014a8 <display7SEG_GREEN_RED+0x1d4>)
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	4b5b      	ldr	r3, [pc, #364]	@ (80014ac <display7SEG_GREEN_RED+0x1d8>)
 800133e:	fb83 2301 	smull	r2, r3, r3, r1
 8001342:	109a      	asrs	r2, r3, #2
 8001344:	17cb      	asrs	r3, r1, #31
 8001346:	1ad2      	subs	r2, r2, r3
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	1aca      	subs	r2, r1, r3
 8001352:	4b54      	ldr	r3, [pc, #336]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001354:	605a      	str	r2, [r3, #4]
		if(Led_buffer[3] < 0 && Led_buffer[2] >0){
 8001356:	4b53      	ldr	r3, [pc, #332]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da0b      	bge.n	8001376 <display7SEG_GREEN_RED+0xa2>
 800135e:	4b51      	ldr	r3, [pc, #324]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	dd07      	ble.n	8001376 <display7SEG_GREEN_RED+0xa2>
					Led_buffer[3]=9;
 8001366:	4b4f      	ldr	r3, [pc, #316]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001368:	2209      	movs	r2, #9
 800136a:	60da      	str	r2, [r3, #12]
					Led_buffer[2]--;
 800136c:	4b4d      	ldr	r3, [pc, #308]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	3b01      	subs	r3, #1
 8001372:	4a4c      	ldr	r2, [pc, #304]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001374:	6093      	str	r3, [r2, #8]
		if(Led_buffer[2] == 0 && Led_buffer[3]==0){
 8001376:	4b4b      	ldr	r3, [pc, #300]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d11c      	bne.n	80013b8 <display7SEG_GREEN_RED+0xe4>
 800137e:	4b49      	ldr	r3, [pc, #292]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d118      	bne.n	80013b8 <display7SEG_GREEN_RED+0xe4>
			Led_buffer[2] = GREEN_TIME/10;
 8001386:	4b4a      	ldr	r3, [pc, #296]	@ (80014b0 <display7SEG_GREEN_RED+0x1dc>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a48      	ldr	r2, [pc, #288]	@ (80014ac <display7SEG_GREEN_RED+0x1d8>)
 800138c:	fb82 1203 	smull	r1, r2, r2, r3
 8001390:	1092      	asrs	r2, r2, #2
 8001392:	17db      	asrs	r3, r3, #31
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	4a43      	ldr	r2, [pc, #268]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001398:	6093      	str	r3, [r2, #8]
			Led_buffer[3] = GREEN_TIME%10;
 800139a:	4b45      	ldr	r3, [pc, #276]	@ (80014b0 <display7SEG_GREEN_RED+0x1dc>)
 800139c:	6819      	ldr	r1, [r3, #0]
 800139e:	4b43      	ldr	r3, [pc, #268]	@ (80014ac <display7SEG_GREEN_RED+0x1d8>)
 80013a0:	fb83 2301 	smull	r2, r3, r3, r1
 80013a4:	109a      	asrs	r2, r3, #2
 80013a6:	17cb      	asrs	r3, r1, #31
 80013a8:	1ad2      	subs	r2, r2, r3
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	1aca      	subs	r2, r1, r3
 80013b4:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80013b6:	60da      	str	r2, [r3, #12]
		if(Led_buffer[5] < 0 && Led_buffer[4] >0){
 80013b8:	4b3a      	ldr	r3, [pc, #232]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da0b      	bge.n	80013d8 <display7SEG_GREEN_RED+0x104>
 80013c0:	4b38      	ldr	r3, [pc, #224]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	dd07      	ble.n	80013d8 <display7SEG_GREEN_RED+0x104>
					Led_buffer[5]=9;
 80013c8:	4b36      	ldr	r3, [pc, #216]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80013ca:	2209      	movs	r2, #9
 80013cc:	615a      	str	r2, [r3, #20]
					Led_buffer[4]--;
 80013ce:	4b35      	ldr	r3, [pc, #212]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	4a33      	ldr	r2, [pc, #204]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80013d6:	6113      	str	r3, [r2, #16]
		if(Led_buffer[4] == 0 && Led_buffer[5]==0){
 80013d8:	4b32      	ldr	r3, [pc, #200]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d11c      	bne.n	800141a <display7SEG_GREEN_RED+0x146>
 80013e0:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d118      	bne.n	800141a <display7SEG_GREEN_RED+0x146>
			Led_buffer[4] = YELLOW_TIME/10;
 80013e8:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <display7SEG_GREEN_RED+0x1e0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a2f      	ldr	r2, [pc, #188]	@ (80014ac <display7SEG_GREEN_RED+0x1d8>)
 80013ee:	fb82 1203 	smull	r1, r2, r2, r3
 80013f2:	1092      	asrs	r2, r2, #2
 80013f4:	17db      	asrs	r3, r3, #31
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	4a2a      	ldr	r2, [pc, #168]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 80013fa:	6113      	str	r3, [r2, #16]
			Led_buffer[5] = YELLOW_TIME%10;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <display7SEG_GREEN_RED+0x1e0>)
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <display7SEG_GREEN_RED+0x1d8>)
 8001402:	fb83 2301 	smull	r2, r3, r3, r1
 8001406:	109a      	asrs	r2, r3, #2
 8001408:	17cb      	asrs	r3, r1, #31
 800140a:	1ad2      	subs	r2, r2, r3
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	1aca      	subs	r2, r1, r3
 8001416:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001418:	615a      	str	r2, [r3, #20]
		setTimer3(50);
 800141a:	2032      	movs	r0, #50	@ 0x32
 800141c:	f000 fb42 	bl	8001aa4 <setTimer3>
		num_EN = 1;
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <display7SEG_GREEN_RED+0x1cc>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
		break;
 8001426:	e039      	b.n	800149c <display7SEG_GREEN_RED+0x1c8>
				setEN(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fac3 	bl	80009b4 <setEN>
				display7SEG1(Led_buffer[2]);
 800142e:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fccc 	bl	8000dd0 <display7SEG1>
				display7SEG2(Led_buffer[0]);
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fafd 	bl	8000a3c <display7SEG2>
				if(timer3_flag == 1){
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <display7SEG_GREEN_RED+0x1e4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d125      	bne.n	8001496 <display7SEG_GREEN_RED+0x1c2>
					num_EN =2;
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <display7SEG_GREEN_RED+0x1cc>)
 800144c:	2202      	movs	r2, #2
 800144e:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 8001450:	2032      	movs	r0, #50	@ 0x32
 8001452:	f000 fb27 	bl	8001aa4 <setTimer3>
				break;
 8001456:	e01e      	b.n	8001496 <display7SEG_GREEN_RED+0x1c2>
				setEN(2);
 8001458:	2002      	movs	r0, #2
 800145a:	f7ff faab 	bl	80009b4 <setEN>
				display7SEG1(Led_buffer[3]);
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fcb4 	bl	8000dd0 <display7SEG1>
				display7SEG2(Led_buffer[1]);
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fae5 	bl	8000a3c <display7SEG2>
				if(timer3_flag == 1){
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <display7SEG_GREEN_RED+0x1e4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10f      	bne.n	800149a <display7SEG_GREEN_RED+0x1c6>
					Led_buffer[1]--;
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	4a08      	ldr	r2, [pc, #32]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001482:	6053      	str	r3, [r2, #4]
					Led_buffer[3]--;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	3b01      	subs	r3, #1
 800148a:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <display7SEG_GREEN_RED+0x1d0>)
 800148c:	60d3      	str	r3, [r2, #12]
					num_EN =0;
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <display7SEG_GREEN_RED+0x1cc>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
				break;
 8001494:	e001      	b.n	800149a <display7SEG_GREEN_RED+0x1c6>
				break;
 8001496:	bf00      	nop
 8001498:	e000      	b.n	800149c <display7SEG_GREEN_RED+0x1c8>
				break;
 800149a:	bf00      	nop
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000090 	.word	0x20000090
 80014a4:	20000094 	.word	0x20000094
 80014a8:	20000048 	.word	0x20000048
 80014ac:	66666667 	.word	0x66666667
 80014b0:	2000004c 	.word	0x2000004c
 80014b4:	20000050 	.word	0x20000050
 80014b8:	2000011c 	.word	0x2000011c

080014bc <display7SEG_RED_YELLOW>:

void display7SEG_RED_YELLOW(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	switch(num_EN){
 80014c0:	4b71      	ldr	r3, [pc, #452]	@ (8001688 <display7SEG_RED_YELLOW+0x1cc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	f000 80bb 	beq.w	8001640 <display7SEG_RED_YELLOW+0x184>
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	f300 80da 	bgt.w	8001684 <display7SEG_RED_YELLOW+0x1c8>
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <display7SEG_RED_YELLOW+0x20>
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	f000 809b 	beq.w	8001610 <display7SEG_RED_YELLOW+0x154>
					Led_buffer[5]--;
					num_EN =0;
				}
				break;
}
}
 80014da:	e0d3      	b.n	8001684 <display7SEG_RED_YELLOW+0x1c8>
		if(Led_buffer[1] < 0 && Led_buffer[0] >0){
 80014dc:	4b6b      	ldr	r3, [pc, #428]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da0b      	bge.n	80014fc <display7SEG_RED_YELLOW+0x40>
 80014e4:	4b69      	ldr	r3, [pc, #420]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dd07      	ble.n	80014fc <display7SEG_RED_YELLOW+0x40>
					Led_buffer[1]=9;
 80014ec:	4b67      	ldr	r3, [pc, #412]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80014ee:	2209      	movs	r2, #9
 80014f0:	605a      	str	r2, [r3, #4]
					Led_buffer[0]--;
 80014f2:	4b66      	ldr	r3, [pc, #408]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	4a64      	ldr	r2, [pc, #400]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80014fa:	6013      	str	r3, [r2, #0]
		if(Led_buffer[0] == 0 && Led_buffer[1]==0){
 80014fc:	4b63      	ldr	r3, [pc, #396]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d11c      	bne.n	800153e <display7SEG_RED_YELLOW+0x82>
 8001504:	4b61      	ldr	r3, [pc, #388]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d118      	bne.n	800153e <display7SEG_RED_YELLOW+0x82>
			Led_buffer[0] = RED_TIME/10;
 800150c:	4b60      	ldr	r3, [pc, #384]	@ (8001690 <display7SEG_RED_YELLOW+0x1d4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a60      	ldr	r2, [pc, #384]	@ (8001694 <display7SEG_RED_YELLOW+0x1d8>)
 8001512:	fb82 1203 	smull	r1, r2, r2, r3
 8001516:	1092      	asrs	r2, r2, #2
 8001518:	17db      	asrs	r3, r3, #31
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	4a5b      	ldr	r2, [pc, #364]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 800151e:	6013      	str	r3, [r2, #0]
			Led_buffer[1] = RED_TIME%10;
 8001520:	4b5b      	ldr	r3, [pc, #364]	@ (8001690 <display7SEG_RED_YELLOW+0x1d4>)
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	4b5b      	ldr	r3, [pc, #364]	@ (8001694 <display7SEG_RED_YELLOW+0x1d8>)
 8001526:	fb83 2301 	smull	r2, r3, r3, r1
 800152a:	109a      	asrs	r2, r3, #2
 800152c:	17cb      	asrs	r3, r1, #31
 800152e:	1ad2      	subs	r2, r2, r3
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	1aca      	subs	r2, r1, r3
 800153a:	4b54      	ldr	r3, [pc, #336]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 800153c:	605a      	str	r2, [r3, #4]
		if(Led_buffer[3] < 0 && Led_buffer[2] >0){
 800153e:	4b53      	ldr	r3, [pc, #332]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	da0b      	bge.n	800155e <display7SEG_RED_YELLOW+0xa2>
 8001546:	4b51      	ldr	r3, [pc, #324]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	dd07      	ble.n	800155e <display7SEG_RED_YELLOW+0xa2>
					Led_buffer[3]=9;
 800154e:	4b4f      	ldr	r3, [pc, #316]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001550:	2209      	movs	r2, #9
 8001552:	60da      	str	r2, [r3, #12]
					Led_buffer[2]--;
 8001554:	4b4d      	ldr	r3, [pc, #308]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a4c      	ldr	r2, [pc, #304]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 800155c:	6093      	str	r3, [r2, #8]
		if(Led_buffer[2] == 0 && Led_buffer[3]==0){
 800155e:	4b4b      	ldr	r3, [pc, #300]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d11c      	bne.n	80015a0 <display7SEG_RED_YELLOW+0xe4>
 8001566:	4b49      	ldr	r3, [pc, #292]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <display7SEG_RED_YELLOW+0xe4>
			Led_buffer[2] = GREEN_TIME/10;
 800156e:	4b4a      	ldr	r3, [pc, #296]	@ (8001698 <display7SEG_RED_YELLOW+0x1dc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a48      	ldr	r2, [pc, #288]	@ (8001694 <display7SEG_RED_YELLOW+0x1d8>)
 8001574:	fb82 1203 	smull	r1, r2, r2, r3
 8001578:	1092      	asrs	r2, r2, #2
 800157a:	17db      	asrs	r3, r3, #31
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	4a43      	ldr	r2, [pc, #268]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001580:	6093      	str	r3, [r2, #8]
			Led_buffer[3] = GREEN_TIME%10;
 8001582:	4b45      	ldr	r3, [pc, #276]	@ (8001698 <display7SEG_RED_YELLOW+0x1dc>)
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <display7SEG_RED_YELLOW+0x1d8>)
 8001588:	fb83 2301 	smull	r2, r3, r3, r1
 800158c:	109a      	asrs	r2, r3, #2
 800158e:	17cb      	asrs	r3, r1, #31
 8001590:	1ad2      	subs	r2, r2, r3
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	1aca      	subs	r2, r1, r3
 800159c:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 800159e:	60da      	str	r2, [r3, #12]
		if(Led_buffer[5] < 0 && Led_buffer[4] >0){
 80015a0:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da0b      	bge.n	80015c0 <display7SEG_RED_YELLOW+0x104>
 80015a8:	4b38      	ldr	r3, [pc, #224]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	dd07      	ble.n	80015c0 <display7SEG_RED_YELLOW+0x104>
					Led_buffer[5]=9;
 80015b0:	4b36      	ldr	r3, [pc, #216]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80015b2:	2209      	movs	r2, #9
 80015b4:	615a      	str	r2, [r3, #20]
					Led_buffer[4]--;
 80015b6:	4b35      	ldr	r3, [pc, #212]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	4a33      	ldr	r2, [pc, #204]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80015be:	6113      	str	r3, [r2, #16]
		if(Led_buffer[4] == 0 && Led_buffer[5]==0){
 80015c0:	4b32      	ldr	r3, [pc, #200]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d11c      	bne.n	8001602 <display7SEG_RED_YELLOW+0x146>
 80015c8:	4b30      	ldr	r3, [pc, #192]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d118      	bne.n	8001602 <display7SEG_RED_YELLOW+0x146>
			Led_buffer[4] = YELLOW_TIME/10;
 80015d0:	4b32      	ldr	r3, [pc, #200]	@ (800169c <display7SEG_RED_YELLOW+0x1e0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001694 <display7SEG_RED_YELLOW+0x1d8>)
 80015d6:	fb82 1203 	smull	r1, r2, r2, r3
 80015da:	1092      	asrs	r2, r2, #2
 80015dc:	17db      	asrs	r3, r3, #31
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	4a2a      	ldr	r2, [pc, #168]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 80015e2:	6113      	str	r3, [r2, #16]
			Led_buffer[5] = YELLOW_TIME%10;
 80015e4:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <display7SEG_RED_YELLOW+0x1e0>)
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <display7SEG_RED_YELLOW+0x1d8>)
 80015ea:	fb83 2301 	smull	r2, r3, r3, r1
 80015ee:	109a      	asrs	r2, r3, #2
 80015f0:	17cb      	asrs	r3, r1, #31
 80015f2:	1ad2      	subs	r2, r2, r3
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	1aca      	subs	r2, r1, r3
 80015fe:	4b23      	ldr	r3, [pc, #140]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001600:	615a      	str	r2, [r3, #20]
		setTimer3(50);
 8001602:	2032      	movs	r0, #50	@ 0x32
 8001604:	f000 fa4e 	bl	8001aa4 <setTimer3>
		num_EN = 1;
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <display7SEG_RED_YELLOW+0x1cc>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]
		break;
 800160e:	e039      	b.n	8001684 <display7SEG_RED_YELLOW+0x1c8>
				setEN(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff f9cf 	bl	80009b4 <setEN>
				display7SEG1(Led_buffer[0]);
 8001616:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fbd8 	bl	8000dd0 <display7SEG1>
				display7SEG2(Led_buffer[4]);
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fa09 	bl	8000a3c <display7SEG2>
				if(timer3_flag == 1){
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <display7SEG_RED_YELLOW+0x1e4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d125      	bne.n	800167e <display7SEG_RED_YELLOW+0x1c2>
					num_EN =2;
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <display7SEG_RED_YELLOW+0x1cc>)
 8001634:	2202      	movs	r2, #2
 8001636:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 8001638:	2032      	movs	r0, #50	@ 0x32
 800163a:	f000 fa33 	bl	8001aa4 <setTimer3>
				break;
 800163e:	e01e      	b.n	800167e <display7SEG_RED_YELLOW+0x1c2>
				setEN(2);
 8001640:	2002      	movs	r0, #2
 8001642:	f7ff f9b7 	bl	80009b4 <setEN>
				display7SEG1(Led_buffer[1]);
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fbc0 	bl	8000dd0 <display7SEG1>
				display7SEG2(Led_buffer[5]);
 8001650:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff f9f1 	bl	8000a3c <display7SEG2>
				if(timer3_flag == 1){
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <display7SEG_RED_YELLOW+0x1e4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d10f      	bne.n	8001682 <display7SEG_RED_YELLOW+0x1c6>
					Led_buffer[1]--;
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	4a08      	ldr	r2, [pc, #32]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 800166a:	6053      	str	r3, [r2, #4]
					Led_buffer[5]--;
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	3b01      	subs	r3, #1
 8001672:	4a06      	ldr	r2, [pc, #24]	@ (800168c <display7SEG_RED_YELLOW+0x1d0>)
 8001674:	6153      	str	r3, [r2, #20]
					num_EN =0;
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <display7SEG_RED_YELLOW+0x1cc>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
				break;
 800167c:	e001      	b.n	8001682 <display7SEG_RED_YELLOW+0x1c6>
				break;
 800167e:	bf00      	nop
 8001680:	e000      	b.n	8001684 <display7SEG_RED_YELLOW+0x1c8>
				break;
 8001682:	bf00      	nop
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000090 	.word	0x20000090
 800168c:	20000094 	.word	0x20000094
 8001690:	20000048 	.word	0x20000048
 8001694:	66666667 	.word	0x66666667
 8001698:	2000004c 	.word	0x2000004c
 800169c:	20000050 	.word	0x20000050
 80016a0:	2000011c 	.word	0x2000011c

080016a4 <display7SEG_RED_GREEN>:

void display7SEG_RED_GREEN(){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	switch(num_EN){
 80016a8:	4b71      	ldr	r3, [pc, #452]	@ (8001870 <display7SEG_RED_GREEN+0x1cc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	f000 80bb 	beq.w	8001828 <display7SEG_RED_GREEN+0x184>
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	f300 80da 	bgt.w	800186c <display7SEG_RED_GREEN+0x1c8>
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <display7SEG_RED_GREEN+0x20>
 80016bc:	2b01      	cmp	r3, #1
 80016be:	f000 809b 	beq.w	80017f8 <display7SEG_RED_GREEN+0x154>
					Led_buffer[3]--;
					num_EN =0;
				}
				break;
}
}
 80016c2:	e0d3      	b.n	800186c <display7SEG_RED_GREEN+0x1c8>
				if(Led_buffer[1] < 0 && Led_buffer[0] >0){
 80016c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da0b      	bge.n	80016e4 <display7SEG_RED_GREEN+0x40>
 80016cc:	4b69      	ldr	r3, [pc, #420]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	dd07      	ble.n	80016e4 <display7SEG_RED_GREEN+0x40>
							Led_buffer[1]=9;
 80016d4:	4b67      	ldr	r3, [pc, #412]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80016d6:	2209      	movs	r2, #9
 80016d8:	605a      	str	r2, [r3, #4]
							Led_buffer[0]--;
 80016da:	4b66      	ldr	r3, [pc, #408]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	4a64      	ldr	r2, [pc, #400]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80016e2:	6013      	str	r3, [r2, #0]
				if(Led_buffer[0] == 0 && Led_buffer[1]==0){
 80016e4:	4b63      	ldr	r3, [pc, #396]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11c      	bne.n	8001726 <display7SEG_RED_GREEN+0x82>
 80016ec:	4b61      	ldr	r3, [pc, #388]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d118      	bne.n	8001726 <display7SEG_RED_GREEN+0x82>
					Led_buffer[0] = RED_TIME/10;
 80016f4:	4b60      	ldr	r3, [pc, #384]	@ (8001878 <display7SEG_RED_GREEN+0x1d4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a60      	ldr	r2, [pc, #384]	@ (800187c <display7SEG_RED_GREEN+0x1d8>)
 80016fa:	fb82 1203 	smull	r1, r2, r2, r3
 80016fe:	1092      	asrs	r2, r2, #2
 8001700:	17db      	asrs	r3, r3, #31
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4a5b      	ldr	r2, [pc, #364]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001706:	6013      	str	r3, [r2, #0]
					Led_buffer[1] = RED_TIME%10;
 8001708:	4b5b      	ldr	r3, [pc, #364]	@ (8001878 <display7SEG_RED_GREEN+0x1d4>)
 800170a:	6819      	ldr	r1, [r3, #0]
 800170c:	4b5b      	ldr	r3, [pc, #364]	@ (800187c <display7SEG_RED_GREEN+0x1d8>)
 800170e:	fb83 2301 	smull	r2, r3, r3, r1
 8001712:	109a      	asrs	r2, r3, #2
 8001714:	17cb      	asrs	r3, r1, #31
 8001716:	1ad2      	subs	r2, r2, r3
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	1aca      	subs	r2, r1, r3
 8001722:	4b54      	ldr	r3, [pc, #336]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001724:	605a      	str	r2, [r3, #4]
				if(Led_buffer[3] < 0 && Led_buffer[2] >0){
 8001726:	4b53      	ldr	r3, [pc, #332]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	da0b      	bge.n	8001746 <display7SEG_RED_GREEN+0xa2>
 800172e:	4b51      	ldr	r3, [pc, #324]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dd07      	ble.n	8001746 <display7SEG_RED_GREEN+0xa2>
							Led_buffer[3]=9;
 8001736:	4b4f      	ldr	r3, [pc, #316]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001738:	2209      	movs	r2, #9
 800173a:	60da      	str	r2, [r3, #12]
							Led_buffer[2]--;
 800173c:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	3b01      	subs	r3, #1
 8001742:	4a4c      	ldr	r2, [pc, #304]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001744:	6093      	str	r3, [r2, #8]
				if(Led_buffer[2] == 0 && Led_buffer[3]==0){
 8001746:	4b4b      	ldr	r3, [pc, #300]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d11c      	bne.n	8001788 <display7SEG_RED_GREEN+0xe4>
 800174e:	4b49      	ldr	r3, [pc, #292]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <display7SEG_RED_GREEN+0xe4>
					Led_buffer[2] = GREEN_TIME/10;
 8001756:	4b4a      	ldr	r3, [pc, #296]	@ (8001880 <display7SEG_RED_GREEN+0x1dc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a48      	ldr	r2, [pc, #288]	@ (800187c <display7SEG_RED_GREEN+0x1d8>)
 800175c:	fb82 1203 	smull	r1, r2, r2, r3
 8001760:	1092      	asrs	r2, r2, #2
 8001762:	17db      	asrs	r3, r3, #31
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a43      	ldr	r2, [pc, #268]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001768:	6093      	str	r3, [r2, #8]
					Led_buffer[3] = GREEN_TIME%10;
 800176a:	4b45      	ldr	r3, [pc, #276]	@ (8001880 <display7SEG_RED_GREEN+0x1dc>)
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	4b43      	ldr	r3, [pc, #268]	@ (800187c <display7SEG_RED_GREEN+0x1d8>)
 8001770:	fb83 2301 	smull	r2, r3, r3, r1
 8001774:	109a      	asrs	r2, r3, #2
 8001776:	17cb      	asrs	r3, r1, #31
 8001778:	1ad2      	subs	r2, r2, r3
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	1aca      	subs	r2, r1, r3
 8001784:	4b3b      	ldr	r3, [pc, #236]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001786:	60da      	str	r2, [r3, #12]
				if(Led_buffer[5] < 0 && Led_buffer[4] >0){
 8001788:	4b3a      	ldr	r3, [pc, #232]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	2b00      	cmp	r3, #0
 800178e:	da0b      	bge.n	80017a8 <display7SEG_RED_GREEN+0x104>
 8001790:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	dd07      	ble.n	80017a8 <display7SEG_RED_GREEN+0x104>
							Led_buffer[5]=9;
 8001798:	4b36      	ldr	r3, [pc, #216]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 800179a:	2209      	movs	r2, #9
 800179c:	615a      	str	r2, [r3, #20]
							Led_buffer[4]--;
 800179e:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	4a33      	ldr	r2, [pc, #204]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80017a6:	6113      	str	r3, [r2, #16]
				if(Led_buffer[4] == 0 && Led_buffer[5]==0){
 80017a8:	4b32      	ldr	r3, [pc, #200]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d11c      	bne.n	80017ea <display7SEG_RED_GREEN+0x146>
 80017b0:	4b30      	ldr	r3, [pc, #192]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d118      	bne.n	80017ea <display7SEG_RED_GREEN+0x146>
					Led_buffer[4] = YELLOW_TIME/10;
 80017b8:	4b32      	ldr	r3, [pc, #200]	@ (8001884 <display7SEG_RED_GREEN+0x1e0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a2f      	ldr	r2, [pc, #188]	@ (800187c <display7SEG_RED_GREEN+0x1d8>)
 80017be:	fb82 1203 	smull	r1, r2, r2, r3
 80017c2:	1092      	asrs	r2, r2, #2
 80017c4:	17db      	asrs	r3, r3, #31
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80017ca:	6113      	str	r3, [r2, #16]
					Led_buffer[5] = YELLOW_TIME%10;
 80017cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <display7SEG_RED_GREEN+0x1e0>)
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <display7SEG_RED_GREEN+0x1d8>)
 80017d2:	fb83 2301 	smull	r2, r3, r3, r1
 80017d6:	109a      	asrs	r2, r3, #2
 80017d8:	17cb      	asrs	r3, r1, #31
 80017da:	1ad2      	subs	r2, r2, r3
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	1aca      	subs	r2, r1, r3
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 80017e8:	615a      	str	r2, [r3, #20]
				setTimer3(50);
 80017ea:	2032      	movs	r0, #50	@ 0x32
 80017ec:	f000 f95a 	bl	8001aa4 <setTimer3>
				num_EN = 1;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <display7SEG_RED_GREEN+0x1cc>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
				break;
 80017f6:	e039      	b.n	800186c <display7SEG_RED_GREEN+0x1c8>
				setEN(1);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff f8db 	bl	80009b4 <setEN>
				display7SEG1(Led_buffer[0]);
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fae4 	bl	8000dd0 <display7SEG1>
				display7SEG2(Led_buffer[2]);
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f915 	bl	8000a3c <display7SEG2>
				if(timer3_flag == 1){
 8001812:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <display7SEG_RED_GREEN+0x1e4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d125      	bne.n	8001866 <display7SEG_RED_GREEN+0x1c2>
					num_EN =2;
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <display7SEG_RED_GREEN+0x1cc>)
 800181c:	2202      	movs	r2, #2
 800181e:	601a      	str	r2, [r3, #0]
					setTimer3(50);
 8001820:	2032      	movs	r0, #50	@ 0x32
 8001822:	f000 f93f 	bl	8001aa4 <setTimer3>
				break;
 8001826:	e01e      	b.n	8001866 <display7SEG_RED_GREEN+0x1c2>
				setEN(2);
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff f8c3 	bl	80009b4 <setEN>
				display7SEG1(Led_buffer[1]);
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff facc 	bl	8000dd0 <display7SEG1>
				display7SEG2(Led_buffer[3]);
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff f8fd 	bl	8000a3c <display7SEG2>
				if(timer3_flag == 1){
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <display7SEG_RED_GREEN+0x1e4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10f      	bne.n	800186a <display7SEG_RED_GREEN+0x1c6>
					Led_buffer[1]--;
 800184a:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001852:	6053      	str	r3, [r2, #4]
					Led_buffer[3]--;
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	3b01      	subs	r3, #1
 800185a:	4a06      	ldr	r2, [pc, #24]	@ (8001874 <display7SEG_RED_GREEN+0x1d0>)
 800185c:	60d3      	str	r3, [r2, #12]
					num_EN =0;
 800185e:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <display7SEG_RED_GREEN+0x1cc>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
				break;
 8001864:	e001      	b.n	800186a <display7SEG_RED_GREEN+0x1c6>
				break;
 8001866:	bf00      	nop
 8001868:	e000      	b.n	800186c <display7SEG_RED_GREEN+0x1c8>
				break;
 800186a:	bf00      	nop
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000090 	.word	0x20000090
 8001874:	20000094 	.word	0x20000094
 8001878:	20000048 	.word	0x20000048
 800187c:	66666667 	.word	0x66666667
 8001880:	2000004c 	.word	0x2000004c
 8001884:	20000050 	.word	0x20000050
 8001888:	2000011c 	.word	0x2000011c

0800188c <display7SEG_TFL>:


void display7SEG_TFL(){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	switch(status){
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <display7SEG_TFL+0x44>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	2b03      	cmp	r3, #3
 8001898:	d816      	bhi.n	80018c8 <display7SEG_TFL+0x3c>
 800189a:	a201      	add	r2, pc, #4	@ (adr r2, 80018a0 <display7SEG_TFL+0x14>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	080018b1 	.word	0x080018b1
 80018a4:	080018b7 	.word	0x080018b7
 80018a8:	080018bd 	.word	0x080018bd
 80018ac:	080018c3 	.word	0x080018c3
	case RED_GREEN:
		display7SEG_RED_GREEN();
 80018b0:	f7ff fef8 	bl	80016a4 <display7SEG_RED_GREEN>
		break;
 80018b4:	e009      	b.n	80018ca <display7SEG_TFL+0x3e>
	case RED_YELLOW:
		display7SEG_RED_YELLOW();
 80018b6:	f7ff fe01 	bl	80014bc <display7SEG_RED_YELLOW>
		break;
 80018ba:	e006      	b.n	80018ca <display7SEG_TFL+0x3e>
	case GREEN_RED:
		display7SEG_GREEN_RED();
 80018bc:	f7ff fd0a 	bl	80012d4 <display7SEG_GREEN_RED>
		break;
 80018c0:	e003      	b.n	80018ca <display7SEG_TFL+0x3e>
	case YELLOW_RED:
		display7SEG_YELLOW_RED();
 80018c2:	f7ff fc13 	bl	80010ec <display7SEG_YELLOW_RED>
		break;
 80018c6:	e000      	b.n	80018ca <display7SEG_TFL+0x3e>
	default:
		break;
 80018c8:	bf00      	nop
	}


}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000008c 	.word	0x2000008c

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f000 fb62 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 f820 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80018e0:	f000 f85a 	bl	8001998 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80018e4:	480b      	ldr	r0, [pc, #44]	@ (8001914 <main+0x40>)
 80018e6:	f001 fabd 	bl	8002e64 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Lab3_Init();
 80018ea:	f7ff f80b 	bl	8000904 <Lab3_Init>
  initLedBuffer();
 80018ee:	f7fe ffad 	bl	800084c <initLedBuffer>
  setTimer0(100);
 80018f2:	2064      	movs	r0, #100	@ 0x64
 80018f4:	f000 f8ae 	bl	8001a54 <setTimer0>

  while (1)
  {
    /* USER CODE END WHILE */
	  if(timer0_flag == 1){
 80018f8:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <main+0x44>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <main+0x3a>
		  setTimer0(100);
 8001900:	2064      	movs	r0, #100	@ 0x64
 8001902:	f000 f8a7 	bl	8001a54 <setTimer0>
		  HAL_GPIO_TogglePin(GPIOA, LED_RED);
 8001906:	2120      	movs	r1, #32
 8001908:	4804      	ldr	r0, [pc, #16]	@ (800191c <main+0x48>)
 800190a:	f000 fe64 	bl	80025d6 <HAL_GPIO_TogglePin>
	  }

//	  fsm_automatic();
	  fsm_manual();
 800190e:	f7fe fdd3 	bl	80004b8 <fsm_manual>
	  if(timer0_flag == 1){
 8001912:	e7f1      	b.n	80018f8 <main+0x24>
 8001914:	200000bc 	.word	0x200000bc
 8001918:	20000104 	.word	0x20000104
 800191c:	40010800 	.word	0x40010800

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b090      	sub	sp, #64	@ 0x40
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0318 	add.w	r3, r7, #24
 800192a:	2228      	movs	r2, #40	@ 0x28
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fe24 	bl	800357c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001946:	2301      	movs	r3, #1
 8001948:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800194a:	2310      	movs	r3, #16
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001952:	f107 0318 	add.w	r3, r7, #24
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fe56 	bl	8002608 <HAL_RCC_OscConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001962:	f000 f871 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001966:	230f      	movs	r3, #15
 8001968:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f001 f8c4 	bl	8002b0c <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800198a:	f000 f85d 	bl	8001a48 <Error_Handler>
  }
}
 800198e:	bf00      	nop
 8001990:	3740      	adds	r7, #64	@ 0x40
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <MX_TIM2_Init+0x94>)
 80019b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_TIM2_Init+0x94>)
 80019be:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80019c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <MX_TIM2_Init+0x94>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <MX_TIM2_Init+0x94>)
 80019cc:	2209      	movs	r2, #9
 80019ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <MX_TIM2_Init+0x94>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <MX_TIM2_Init+0x94>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019dc:	4813      	ldr	r0, [pc, #76]	@ (8001a2c <MX_TIM2_Init+0x94>)
 80019de:	f001 f9f1 	bl	8002dc4 <HAL_TIM_Base_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019e8:	f000 f82e 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	4619      	mov	r1, r3
 80019f8:	480c      	ldr	r0, [pc, #48]	@ (8001a2c <MX_TIM2_Init+0x94>)
 80019fa:	f001 fb6f 	bl	80030dc <HAL_TIM_ConfigClockSource>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a04:	f000 f820 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a10:	463b      	mov	r3, r7
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_TIM2_Init+0x94>)
 8001a16:	f001 fd47 	bl	80034a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a20:	f000 f812 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200000bc 	.word	0x200000bc

08001a30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	timer_run();
 8001a38:	f000 f870 	bl	8001b1c <timer_run>
	getKeyInput();
 8001a3c:	f7fe fbb0 	bl	80001a0 <getKeyInput>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <Error_Handler+0x8>

08001a54 <setTimer0>:
int timer8_counter = 0;

int timer9_flag = 0;
int timer9_counter = 0;

void setTimer0(int duration){
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	timer0_counter= duration;
 8001a5c:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <setTimer0+0x20>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <setTimer0+0x24>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000108 	.word	0x20000108
 8001a78:	20000104 	.word	0x20000104

08001a7c <setTimer2>:
void setTimer1(int duration){
	timer1_counter= duration;
	timer1_flag = 0;
}

void setTimer2(int duration){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	timer2_counter= duration;
 8001a84:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <setTimer2+0x20>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <setTimer2+0x24>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000118 	.word	0x20000118
 8001aa0:	20000114 	.word	0x20000114

08001aa4 <setTimer3>:

void setTimer3(int duration){
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	timer3_counter= duration;
 8001aac:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <setTimer3+0x20>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001ab2:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <setTimer3+0x24>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000120 	.word	0x20000120
 8001ac8:	2000011c 	.word	0x2000011c

08001acc <setTimer4>:

void setTimer4(int duration){
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	timer4_counter= duration;
 8001ad4:	4a05      	ldr	r2, [pc, #20]	@ (8001aec <setTimer4+0x20>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001ada:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <setTimer4+0x24>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000128 	.word	0x20000128
 8001af0:	20000124 	.word	0x20000124

08001af4 <setTimer5>:

void setTimer5(int duration){
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	timer5_counter= duration;
 8001afc:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <setTimer5+0x20>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <setTimer5+0x24>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000130 	.word	0x20000130
 8001b18:	2000012c 	.word	0x2000012c

08001b1c <timer_run>:





void timer_run(){
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8001b20:	4b51      	ldr	r3, [pc, #324]	@ (8001c68 <timer_run+0x14c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dd0b      	ble.n	8001b40 <timer_run+0x24>
			timer0_counter--;
 8001b28:	4b4f      	ldr	r3, [pc, #316]	@ (8001c68 <timer_run+0x14c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	4a4e      	ldr	r2, [pc, #312]	@ (8001c68 <timer_run+0x14c>)
 8001b30:	6013      	str	r3, [r2, #0]
			if(timer0_counter <= 0){
 8001b32:	4b4d      	ldr	r3, [pc, #308]	@ (8001c68 <timer_run+0x14c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dc02      	bgt.n	8001b40 <timer_run+0x24>
				timer0_flag = 1;
 8001b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c6c <timer_run+0x150>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer1_counter > 0){
 8001b40:	4b4b      	ldr	r3, [pc, #300]	@ (8001c70 <timer_run+0x154>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	dd0b      	ble.n	8001b60 <timer_run+0x44>
			timer1_counter--;
 8001b48:	4b49      	ldr	r3, [pc, #292]	@ (8001c70 <timer_run+0x154>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	4a48      	ldr	r2, [pc, #288]	@ (8001c70 <timer_run+0x154>)
 8001b50:	6013      	str	r3, [r2, #0]
			if(timer1_counter <= 0){
 8001b52:	4b47      	ldr	r3, [pc, #284]	@ (8001c70 <timer_run+0x154>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	dc02      	bgt.n	8001b60 <timer_run+0x44>
				timer1_flag = 1;
 8001b5a:	4b46      	ldr	r3, [pc, #280]	@ (8001c74 <timer_run+0x158>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer2_counter > 0){
 8001b60:	4b45      	ldr	r3, [pc, #276]	@ (8001c78 <timer_run+0x15c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	dd0b      	ble.n	8001b80 <timer_run+0x64>
			timer2_counter--;
 8001b68:	4b43      	ldr	r3, [pc, #268]	@ (8001c78 <timer_run+0x15c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	4a42      	ldr	r2, [pc, #264]	@ (8001c78 <timer_run+0x15c>)
 8001b70:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 8001b72:	4b41      	ldr	r3, [pc, #260]	@ (8001c78 <timer_run+0x15c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	dc02      	bgt.n	8001b80 <timer_run+0x64>
				timer2_flag = 1;
 8001b7a:	4b40      	ldr	r3, [pc, #256]	@ (8001c7c <timer_run+0x160>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer3_counter > 0){
 8001b80:	4b3f      	ldr	r3, [pc, #252]	@ (8001c80 <timer_run+0x164>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	dd0b      	ble.n	8001ba0 <timer_run+0x84>
			timer3_counter--;
 8001b88:	4b3d      	ldr	r3, [pc, #244]	@ (8001c80 <timer_run+0x164>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c80 <timer_run+0x164>)
 8001b90:	6013      	str	r3, [r2, #0]
			if(timer3_counter <= 0){
 8001b92:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <timer_run+0x164>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	dc02      	bgt.n	8001ba0 <timer_run+0x84>
				timer3_flag = 1;
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <timer_run+0x168>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer4_counter > 0){
 8001ba0:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <timer_run+0x16c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	dd0b      	ble.n	8001bc0 <timer_run+0xa4>
			timer4_counter--;
 8001ba8:	4b37      	ldr	r3, [pc, #220]	@ (8001c88 <timer_run+0x16c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	4a36      	ldr	r2, [pc, #216]	@ (8001c88 <timer_run+0x16c>)
 8001bb0:	6013      	str	r3, [r2, #0]
			if(timer4_counter <= 0){
 8001bb2:	4b35      	ldr	r3, [pc, #212]	@ (8001c88 <timer_run+0x16c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	dc02      	bgt.n	8001bc0 <timer_run+0xa4>
				timer4_flag = 1;
 8001bba:	4b34      	ldr	r3, [pc, #208]	@ (8001c8c <timer_run+0x170>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer5_counter > 0){
 8001bc0:	4b33      	ldr	r3, [pc, #204]	@ (8001c90 <timer_run+0x174>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	dd0b      	ble.n	8001be0 <timer_run+0xc4>
			timer5_counter--;
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <timer_run+0x174>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	4a30      	ldr	r2, [pc, #192]	@ (8001c90 <timer_run+0x174>)
 8001bd0:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c90 <timer_run+0x174>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	dc02      	bgt.n	8001be0 <timer_run+0xc4>
				timer5_flag = 1;
 8001bda:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <timer_run+0x178>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer6_counter > 0){
 8001be0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c98 <timer_run+0x17c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	dd0b      	ble.n	8001c00 <timer_run+0xe4>
			timer6_counter--;
 8001be8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <timer_run+0x17c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	4a2a      	ldr	r2, [pc, #168]	@ (8001c98 <timer_run+0x17c>)
 8001bf0:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0){
 8001bf2:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <timer_run+0x17c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	dc02      	bgt.n	8001c00 <timer_run+0xe4>
				timer6_flag = 1;
 8001bfa:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <timer_run+0x180>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer7_counter > 0){
 8001c00:	4b27      	ldr	r3, [pc, #156]	@ (8001ca0 <timer_run+0x184>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	dd0b      	ble.n	8001c20 <timer_run+0x104>
			timer7_counter--;
 8001c08:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <timer_run+0x184>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	4a24      	ldr	r2, [pc, #144]	@ (8001ca0 <timer_run+0x184>)
 8001c10:	6013      	str	r3, [r2, #0]
			if(timer7_counter <= 0){
 8001c12:	4b23      	ldr	r3, [pc, #140]	@ (8001ca0 <timer_run+0x184>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	dc02      	bgt.n	8001c20 <timer_run+0x104>
				timer7_flag = 1;
 8001c1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <timer_run+0x188>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer8_counter > 0){
 8001c20:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <timer_run+0x18c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	dd0b      	ble.n	8001c40 <timer_run+0x124>
			timer8_counter--;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <timer_run+0x18c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <timer_run+0x18c>)
 8001c30:	6013      	str	r3, [r2, #0]
			if(timer8_counter <= 0){
 8001c32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <timer_run+0x18c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	dc02      	bgt.n	8001c40 <timer_run+0x124>
				timer8_flag = 1;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <timer_run+0x190>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer9_counter > 0){
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <timer_run+0x194>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	dd0b      	ble.n	8001c60 <timer_run+0x144>
			timer9_counter--;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <timer_run+0x194>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	4a18      	ldr	r2, [pc, #96]	@ (8001cb0 <timer_run+0x194>)
 8001c50:	6013      	str	r3, [r2, #0]
			if(timer9_counter <= 0){
 8001c52:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <timer_run+0x194>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	dc02      	bgt.n	8001c60 <timer_run+0x144>
				timer9_flag = 1;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <timer_run+0x198>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000108 	.word	0x20000108
 8001c6c:	20000104 	.word	0x20000104
 8001c70:	20000110 	.word	0x20000110
 8001c74:	2000010c 	.word	0x2000010c
 8001c78:	20000118 	.word	0x20000118
 8001c7c:	20000114 	.word	0x20000114
 8001c80:	20000120 	.word	0x20000120
 8001c84:	2000011c 	.word	0x2000011c
 8001c88:	20000128 	.word	0x20000128
 8001c8c:	20000124 	.word	0x20000124
 8001c90:	20000130 	.word	0x20000130
 8001c94:	2000012c 	.word	0x2000012c
 8001c98:	20000138 	.word	0x20000138
 8001c9c:	20000134 	.word	0x20000134
 8001ca0:	20000140 	.word	0x20000140
 8001ca4:	2000013c 	.word	0x2000013c
 8001ca8:	20000148 	.word	0x20000148
 8001cac:	20000144 	.word	0x20000144
 8001cb0:	20000150 	.word	0x20000150
 8001cb4:	2000014c 	.word	0x2000014c

08001cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6193      	str	r3, [r2, #24]
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a0e      	ldr	r2, [pc, #56]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	61d3      	str	r3, [r2, #28]
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <HAL_MspInit+0x5c>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_MspInit+0x60>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <HAL_MspInit+0x60>)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000

08001d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d2c:	d113      	bne.n	8001d56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <HAL_TIM_Base_MspInit+0x44>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	4a0b      	ldr	r2, [pc, #44]	@ (8001d60 <HAL_TIM_Base_MspInit+0x44>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	61d3      	str	r3, [r2, #28]
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <HAL_TIM_Base_MspInit+0x44>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	201c      	movs	r0, #28
 8001d4c:	f000 fa61 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d50:	201c      	movs	r0, #28
 8001d52:	f000 fa7a 	bl	800224a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <NMI_Handler+0x4>

08001d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db4:	f000 f93a 	bl	800202c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <TIM2_IRQHandler+0x10>)
 8001dc2:	f001 f89b 	bl	8002efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200000bc 	.word	0x200000bc

08001dd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <displayTFL>:

#include "global.h"



void displayTFL(){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	switch (status){
 8001de0:	4b5a      	ldr	r3, [pc, #360]	@ (8001f4c <displayTFL+0x170>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	f200 80ad 	bhi.w	8001f44 <displayTFL+0x168>
 8001dea:	a201      	add	r2, pc, #4	@ (adr r2, 8001df0 <displayTFL+0x14>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001e05 	.word	0x08001e05
 8001df4:	08001e45 	.word	0x08001e45
 8001df8:	08001e85 	.word	0x08001e85
 8001dfc:	08001ec5 	.word	0x08001ec5
 8001e00:	08001f05 	.word	0x08001f05
	case NO_LED:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2104      	movs	r1, #4
 8001e08:	4851      	ldr	r0, [pc, #324]	@ (8001f50 <displayTFL+0x174>)
 8001e0a:	f000 fbcc 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2108      	movs	r1, #8
 8001e12:	484f      	ldr	r0, [pc, #316]	@ (8001f50 <displayTFL+0x174>)
 8001e14:	f000 fbc7 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	484c      	ldr	r0, [pc, #304]	@ (8001f50 <displayTFL+0x174>)
 8001e1e:	f000 fbc2 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2140      	movs	r1, #64	@ 0x40
 8001e26:	484a      	ldr	r0, [pc, #296]	@ (8001f50 <displayTFL+0x174>)
 8001e28:	f000 fbbd 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2180      	movs	r1, #128	@ 0x80
 8001e30:	4847      	ldr	r0, [pc, #284]	@ (8001f50 <displayTFL+0x174>)
 8001e32:	f000 fbb8 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e3c:	4844      	ldr	r0, [pc, #272]	@ (8001f50 <displayTFL+0x174>)
 8001e3e:	f000 fbb2 	bl	80025a6 <HAL_GPIO_WritePin>
		break;
 8001e42:	e080      	b.n	8001f46 <displayTFL+0x16a>
	case RED_GREEN:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	2104      	movs	r1, #4
 8001e48:	4841      	ldr	r0, [pc, #260]	@ (8001f50 <displayTFL+0x174>)
 8001e4a:	f000 fbac 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2108      	movs	r1, #8
 8001e52:	483f      	ldr	r0, [pc, #252]	@ (8001f50 <displayTFL+0x174>)
 8001e54:	f000 fba7 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	483c      	ldr	r0, [pc, #240]	@ (8001f50 <displayTFL+0x174>)
 8001e5e:	f000 fba2 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2140      	movs	r1, #64	@ 0x40
 8001e66:	483a      	ldr	r0, [pc, #232]	@ (8001f50 <displayTFL+0x174>)
 8001e68:	f000 fb9d 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, SET);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	2180      	movs	r1, #128	@ 0x80
 8001e70:	4837      	ldr	r0, [pc, #220]	@ (8001f50 <displayTFL+0x174>)
 8001e72:	f000 fb98 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e7c:	4834      	ldr	r0, [pc, #208]	@ (8001f50 <displayTFL+0x174>)
 8001e7e:	f000 fb92 	bl	80025a6 <HAL_GPIO_WritePin>
		break;
 8001e82:	e060      	b.n	8001f46 <displayTFL+0x16a>
	case RED_YELLOW:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, SET);
 8001e84:	2201      	movs	r2, #1
 8001e86:	2104      	movs	r1, #4
 8001e88:	4831      	ldr	r0, [pc, #196]	@ (8001f50 <displayTFL+0x174>)
 8001e8a:	f000 fb8c 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2108      	movs	r1, #8
 8001e92:	482f      	ldr	r0, [pc, #188]	@ (8001f50 <displayTFL+0x174>)
 8001e94:	f000 fb87 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	482c      	ldr	r0, [pc, #176]	@ (8001f50 <displayTFL+0x174>)
 8001e9e:	f000 fb82 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2, RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2140      	movs	r1, #64	@ 0x40
 8001ea6:	482a      	ldr	r0, [pc, #168]	@ (8001f50 <displayTFL+0x174>)
 8001ea8:	f000 fb7d 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2180      	movs	r1, #128	@ 0x80
 8001eb0:	4827      	ldr	r0, [pc, #156]	@ (8001f50 <displayTFL+0x174>)
 8001eb2:	f000 fb78 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, SET);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ebc:	4824      	ldr	r0, [pc, #144]	@ (8001f50 <displayTFL+0x174>)
 8001ebe:	f000 fb72 	bl	80025a6 <HAL_GPIO_WritePin>
		break;
 8001ec2:	e040      	b.n	8001f46 <displayTFL+0x16a>
	case GREEN_RED:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	4821      	ldr	r0, [pc, #132]	@ (8001f50 <displayTFL+0x174>)
 8001eca:	f000 fb6c 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, SET);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	481f      	ldr	r0, [pc, #124]	@ (8001f50 <displayTFL+0x174>)
 8001ed4:	f000 fb67 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1, RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2110      	movs	r1, #16
 8001edc:	481c      	ldr	r0, [pc, #112]	@ (8001f50 <displayTFL+0x174>)
 8001ede:	f000 fb62 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2,  SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2140      	movs	r1, #64	@ 0x40
 8001ee6:	481a      	ldr	r0, [pc, #104]	@ (8001f50 <displayTFL+0x174>)
 8001ee8:	f000 fb5d 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2180      	movs	r1, #128	@ 0x80
 8001ef0:	4817      	ldr	r0, [pc, #92]	@ (8001f50 <displayTFL+0x174>)
 8001ef2:	f000 fb58 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001efc:	4814      	ldr	r0, [pc, #80]	@ (8001f50 <displayTFL+0x174>)
 8001efe:	f000 fb52 	bl	80025a6 <HAL_GPIO_WritePin>
		break;
 8001f02:	e020      	b.n	8001f46 <displayTFL+0x16a>
	case YELLOW_RED:
		HAL_GPIO_WritePin(GPIOA, LED_RED1, RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2104      	movs	r1, #4
 8001f08:	4811      	ldr	r0, [pc, #68]	@ (8001f50 <displayTFL+0x174>)
 8001f0a:	f000 fb4c 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1, RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2108      	movs	r1, #8
 8001f12:	480f      	ldr	r0, [pc, #60]	@ (8001f50 <displayTFL+0x174>)
 8001f14:	f000 fb47 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1,  SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <displayTFL+0x174>)
 8001f1e:	f000 fb42 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2,  SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	2140      	movs	r1, #64	@ 0x40
 8001f26:	480a      	ldr	r0, [pc, #40]	@ (8001f50 <displayTFL+0x174>)
 8001f28:	f000 fb3d 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2, RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2180      	movs	r1, #128	@ 0x80
 8001f30:	4807      	ldr	r0, [pc, #28]	@ (8001f50 <displayTFL+0x174>)
 8001f32:	f000 fb38 	bl	80025a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2, RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f3c:	4804      	ldr	r0, [pc, #16]	@ (8001f50 <displayTFL+0x174>)
 8001f3e:	f000 fb32 	bl	80025a6 <HAL_GPIO_WritePin>
		break;
 8001f42:	e000      	b.n	8001f46 <displayTFL+0x16a>
	default:
		break;
 8001f44:	bf00      	nop
	}
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000008c 	.word	0x2000008c
 8001f50:	40010800 	.word	0x40010800

08001f54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f54:	f7ff ff3c 	bl	8001dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f58:	480b      	ldr	r0, [pc, #44]	@ (8001f88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f5a:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f70:	4c09      	ldr	r4, [pc, #36]	@ (8001f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f001 fb05 	bl	800358c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f82:	f7ff fca7 	bl	80018d4 <main>
  bx lr
 8001f86:	4770      	bx	lr
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001f90:	08003618 	.word	0x08003618
  ldr r2, =_sbss
 8001f94:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001f98:	20000158 	.word	0x20000158

08001f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC1_2_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <HAL_Init+0x28>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a07      	ldr	r2, [pc, #28]	@ (8001fc8 <HAL_Init+0x28>)
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 f923 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb6:	200f      	movs	r0, #15
 8001fb8:	f000 f808 	bl	8001fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fbc:	f7ff fe7c 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd4:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_InitTick+0x54>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <HAL_InitTick+0x58>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f93b 	bl	8002266 <HAL_SYSTICK_Config>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00e      	b.n	8002018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b0f      	cmp	r3, #15
 8001ffe:	d80a      	bhi.n	8002016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002000:	2200      	movs	r2, #0
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f000 f903 	bl	8002212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800200c:	4a06      	ldr	r2, [pc, #24]	@ (8002028 <HAL_InitTick+0x5c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000058 	.word	0x20000058
 8002024:	20000060 	.word	0x20000060
 8002028:	2000005c 	.word	0x2000005c

0800202c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_IncTick+0x1c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_IncTick+0x20>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4413      	add	r3, r2
 800203c:	4a03      	ldr	r2, [pc, #12]	@ (800204c <HAL_IncTick+0x20>)
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000060 	.word	0x20000060
 800204c:	20000154 	.word	0x20000154

08002050 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b02      	ldr	r3, [pc, #8]	@ (8002060 <HAL_GetTick+0x10>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000154 	.word	0x20000154

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4906      	ldr	r1, [pc, #24]	@ (80020fc <__NVIC_EnableIRQ+0x34>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	@ (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	@ (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	@ 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	@ 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f7ff ff90 	bl	8002100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	@ (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff2d 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff42 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff90 	bl	8002154 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5f 	bl	8002100 <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff35 	bl	80020c8 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffa2 	bl	80021b8 <SysTick_Config>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b08b      	sub	sp, #44	@ 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	e161      	b.n	8002558 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002294:	2201      	movs	r2, #1
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8150 	bne.w	8002552 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a97      	ldr	r2, [pc, #604]	@ (8002514 <HAL_GPIO_Init+0x294>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d05e      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022bc:	4a95      	ldr	r2, [pc, #596]	@ (8002514 <HAL_GPIO_Init+0x294>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d875      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022c2:	4a95      	ldr	r2, [pc, #596]	@ (8002518 <HAL_GPIO_Init+0x298>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d058      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022c8:	4a93      	ldr	r2, [pc, #588]	@ (8002518 <HAL_GPIO_Init+0x298>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d86f      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022ce:	4a93      	ldr	r2, [pc, #588]	@ (800251c <HAL_GPIO_Init+0x29c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d052      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022d4:	4a91      	ldr	r2, [pc, #580]	@ (800251c <HAL_GPIO_Init+0x29c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d869      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022da:	4a91      	ldr	r2, [pc, #580]	@ (8002520 <HAL_GPIO_Init+0x2a0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d04c      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022e0:	4a8f      	ldr	r2, [pc, #572]	@ (8002520 <HAL_GPIO_Init+0x2a0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d863      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022e6:	4a8f      	ldr	r2, [pc, #572]	@ (8002524 <HAL_GPIO_Init+0x2a4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d046      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022ec:	4a8d      	ldr	r2, [pc, #564]	@ (8002524 <HAL_GPIO_Init+0x2a4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d85d      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d82a      	bhi.n	800234c <HAL_GPIO_Init+0xcc>
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d859      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002300 <HAL_GPIO_Init+0x80>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	0800237b 	.word	0x0800237b
 8002304:	08002355 	.word	0x08002355
 8002308:	08002367 	.word	0x08002367
 800230c:	080023a9 	.word	0x080023a9
 8002310:	080023af 	.word	0x080023af
 8002314:	080023af 	.word	0x080023af
 8002318:	080023af 	.word	0x080023af
 800231c:	080023af 	.word	0x080023af
 8002320:	080023af 	.word	0x080023af
 8002324:	080023af 	.word	0x080023af
 8002328:	080023af 	.word	0x080023af
 800232c:	080023af 	.word	0x080023af
 8002330:	080023af 	.word	0x080023af
 8002334:	080023af 	.word	0x080023af
 8002338:	080023af 	.word	0x080023af
 800233c:	080023af 	.word	0x080023af
 8002340:	080023af 	.word	0x080023af
 8002344:	0800235d 	.word	0x0800235d
 8002348:	08002371 	.word	0x08002371
 800234c:	4a76      	ldr	r2, [pc, #472]	@ (8002528 <HAL_GPIO_Init+0x2a8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002352:	e02c      	b.n	80023ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e029      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	3304      	adds	r3, #4
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e024      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	3308      	adds	r3, #8
 800236c:	623b      	str	r3, [r7, #32]
          break;
 800236e:	e01f      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	330c      	adds	r3, #12
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e01a      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002382:	2304      	movs	r3, #4
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e013      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002390:	2308      	movs	r3, #8
 8002392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	611a      	str	r2, [r3, #16]
          break;
 800239a:	e009      	b.n	80023b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800239c:	2308      	movs	r3, #8
 800239e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	615a      	str	r2, [r3, #20]
          break;
 80023a6:	e003      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          break;
 80023ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2bff      	cmp	r3, #255	@ 0xff
 80023b4:	d801      	bhi.n	80023ba <HAL_GPIO_Init+0x13a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	e001      	b.n	80023be <HAL_GPIO_Init+0x13e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2bff      	cmp	r3, #255	@ 0xff
 80023c4:	d802      	bhi.n	80023cc <HAL_GPIO_Init+0x14c>
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x152>
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	3b08      	subs	r3, #8
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	210f      	movs	r1, #15
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80a9 	beq.w	8002552 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002400:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <HAL_GPIO_Init+0x2ac>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a49      	ldr	r2, [pc, #292]	@ (800252c <HAL_GPIO_Init+0x2ac>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_GPIO_Init+0x2ac>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002418:	4a45      	ldr	r2, [pc, #276]	@ (8002530 <HAL_GPIO_Init+0x2b0>)
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a3d      	ldr	r2, [pc, #244]	@ (8002534 <HAL_GPIO_Init+0x2b4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00d      	beq.n	8002460 <HAL_GPIO_Init+0x1e0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3c      	ldr	r2, [pc, #240]	@ (8002538 <HAL_GPIO_Init+0x2b8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <HAL_GPIO_Init+0x1dc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3b      	ldr	r2, [pc, #236]	@ (800253c <HAL_GPIO_Init+0x2bc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_GPIO_Init+0x1d8>
 8002454:	2302      	movs	r3, #2
 8002456:	e004      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 8002458:	2303      	movs	r3, #3
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 8002460:	2300      	movs	r3, #0
 8002462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002464:	f002 0203 	and.w	r2, r2, #3
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	4093      	lsls	r3, r2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002472:	492f      	ldr	r1, [pc, #188]	@ (8002530 <HAL_GPIO_Init+0x2b0>)
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800248c:	4b2c      	ldr	r3, [pc, #176]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	492b      	ldr	r1, [pc, #172]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800249a:	4b29      	ldr	r3, [pc, #164]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	4927      	ldr	r1, [pc, #156]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	4921      	ldr	r1, [pc, #132]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	60cb      	str	r3, [r1, #12]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	491d      	ldr	r1, [pc, #116]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024dc:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4917      	ldr	r1, [pc, #92]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4913      	ldr	r1, [pc, #76]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01f      	beq.n	8002544 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	490d      	ldr	r1, [pc, #52]	@ (8002540 <HAL_GPIO_Init+0x2c0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e01f      	b.n	8002552 <HAL_GPIO_Init+0x2d2>
 8002512:	bf00      	nop
 8002514:	10320000 	.word	0x10320000
 8002518:	10310000 	.word	0x10310000
 800251c:	10220000 	.word	0x10220000
 8002520:	10210000 	.word	0x10210000
 8002524:	10120000 	.word	0x10120000
 8002528:	10110000 	.word	0x10110000
 800252c:	40021000 	.word	0x40021000
 8002530:	40010000 	.word	0x40010000
 8002534:	40010800 	.word	0x40010800
 8002538:	40010c00 	.word	0x40010c00
 800253c:	40011000 	.word	0x40011000
 8002540:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002544:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_GPIO_Init+0x2f4>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	43db      	mvns	r3, r3
 800254c:	4909      	ldr	r1, [pc, #36]	@ (8002574 <HAL_GPIO_Init+0x2f4>)
 800254e:	4013      	ands	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	f47f ae96 	bne.w	8002294 <HAL_GPIO_Init+0x14>
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	372c      	adds	r7, #44	@ 0x2c
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40010400 	.word	0x40010400

08002578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	e001      	b.n	800259a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]
 80025b2:	4613      	mov	r3, r2
 80025b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b6:	787b      	ldrb	r3, [r7, #1]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025bc:	887a      	ldrh	r2, [r7, #2]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c2:	e003      	b.n	80025cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	041a      	lsls	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	611a      	str	r2, [r3, #16]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b085      	sub	sp, #20
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e8:	887a      	ldrh	r2, [r7, #2]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	041a      	lsls	r2, r3, #16
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	887b      	ldrh	r3, [r7, #2]
 80025f6:	400b      	ands	r3, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e272      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8087 	beq.w	8002736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002628:	4b92      	ldr	r3, [pc, #584]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b04      	cmp	r3, #4
 8002632:	d00c      	beq.n	800264e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002634:	4b8f      	ldr	r3, [pc, #572]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d112      	bne.n	8002666 <HAL_RCC_OscConfig+0x5e>
 8002640:	4b8c      	ldr	r3, [pc, #560]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264c:	d10b      	bne.n	8002666 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264e:	4b89      	ldr	r3, [pc, #548]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d06c      	beq.n	8002734 <HAL_RCC_OscConfig+0x12c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d168      	bne.n	8002734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e24c      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x76>
 8002670:	4b80      	ldr	r3, [pc, #512]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a7f      	ldr	r2, [pc, #508]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	e02e      	b.n	80026dc <HAL_RCC_OscConfig+0xd4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x98>
 8002686:	4b7b      	ldr	r3, [pc, #492]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a7a      	ldr	r2, [pc, #488]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 800268c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b78      	ldr	r3, [pc, #480]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a77      	ldr	r2, [pc, #476]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002698:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e01d      	b.n	80026dc <HAL_RCC_OscConfig+0xd4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0xbc>
 80026aa:	4b72      	ldr	r3, [pc, #456]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a71      	ldr	r2, [pc, #452]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0xd4>
 80026c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b68      	ldr	r3, [pc, #416]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a67      	ldr	r2, [pc, #412]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff fcb4 	bl	8002050 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7ff fcb0 	bl	8002050 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	@ 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e200      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0xe4>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7ff fca0 	bl	8002050 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002714:	f7ff fc9c 	bl	8002050 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	@ 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1ec      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	4b53      	ldr	r3, [pc, #332]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x10c>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d063      	beq.n	800280a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002742:	4b4c      	ldr	r3, [pc, #304]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800274e:	4b49      	ldr	r3, [pc, #292]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b08      	cmp	r3, #8
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x18c>
 800275a:	4b46      	ldr	r3, [pc, #280]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d116      	bne.n	8002794 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	4b43      	ldr	r3, [pc, #268]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x176>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e1c0      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b3d      	ldr	r3, [pc, #244]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4939      	ldr	r1, [pc, #228]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e03a      	b.n	800280a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279c:	4b36      	ldr	r3, [pc, #216]	@ (8002878 <HAL_RCC_OscConfig+0x270>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7ff fc55 	bl	8002050 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027aa:	f7ff fc51 	bl	8002050 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e1a1      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4927      	ldr	r1, [pc, #156]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b26      	ldr	r3, [pc, #152]	@ (8002878 <HAL_RCC_OscConfig+0x270>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fc34 	bl	8002050 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ec:	f7ff fc30 	bl	8002050 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e180      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03a      	beq.n	800288c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d019      	beq.n	8002852 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	4b17      	ldr	r3, [pc, #92]	@ (800287c <HAL_RCC_OscConfig+0x274>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002824:	f7ff fc14 	bl	8002050 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282c:	f7ff fc10 	bl	8002050 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e160      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800284a:	2001      	movs	r0, #1
 800284c:	f000 fa9c 	bl	8002d88 <RCC_Delay>
 8002850:	e01c      	b.n	800288c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <HAL_RCC_OscConfig+0x274>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7ff fbfa 	bl	8002050 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285e:	e00f      	b.n	8002880 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002860:	f7ff fbf6 	bl	8002050 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d908      	bls.n	8002880 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e146      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	42420000 	.word	0x42420000
 800287c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	4b92      	ldr	r3, [pc, #584]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e9      	bne.n	8002860 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80a6 	beq.w	80029e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289e:	4b8b      	ldr	r3, [pc, #556]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4a87      	ldr	r2, [pc, #540]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	61d3      	str	r3, [r2, #28]
 80028b6:	4b85      	ldr	r3, [pc, #532]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	4b82      	ldr	r3, [pc, #520]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d118      	bne.n	8002904 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c8>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028de:	f7ff fbb7 	bl	8002050 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7ff fbb3 	bl	8002050 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b64      	cmp	r3, #100	@ 0x64
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e103      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b75      	ldr	r3, [pc, #468]	@ (8002ad0 <HAL_RCC_OscConfig+0x4c8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x312>
 800290c:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a6e      	ldr	r2, [pc, #440]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	e02d      	b.n	8002976 <HAL_RCC_OscConfig+0x36e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0x334>
 8002922:	4b6a      	ldr	r3, [pc, #424]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a69      	ldr	r2, [pc, #420]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6213      	str	r3, [r2, #32]
 800292e:	4b67      	ldr	r3, [pc, #412]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a66      	ldr	r2, [pc, #408]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	6213      	str	r3, [r2, #32]
 800293a:	e01c      	b.n	8002976 <HAL_RCC_OscConfig+0x36e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d10c      	bne.n	800295e <HAL_RCC_OscConfig+0x356>
 8002944:	4b61      	ldr	r3, [pc, #388]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4a60      	ldr	r2, [pc, #384]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	6213      	str	r3, [r2, #32]
 8002950:	4b5e      	ldr	r3, [pc, #376]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a5d      	ldr	r2, [pc, #372]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	e00b      	b.n	8002976 <HAL_RCC_OscConfig+0x36e>
 800295e:	4b5b      	ldr	r3, [pc, #364]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a5a      	ldr	r2, [pc, #360]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	4b58      	ldr	r3, [pc, #352]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a57      	ldr	r2, [pc, #348]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d015      	beq.n	80029aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7ff fb67 	bl	8002050 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7ff fb63 	bl	8002050 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e0b1      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	4b4b      	ldr	r3, [pc, #300]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ee      	beq.n	8002986 <HAL_RCC_OscConfig+0x37e>
 80029a8:	e014      	b.n	80029d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7ff fb51 	bl	8002050 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7ff fb4d 	bl	8002050 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e09b      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c8:	4b40      	ldr	r3, [pc, #256]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ee      	bne.n	80029b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d105      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4b3c      	ldr	r3, [pc, #240]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4a3b      	ldr	r2, [pc, #236]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8087 	beq.w	8002afe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f0:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d061      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d146      	bne.n	8002a92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a04:	4b33      	ldr	r3, [pc, #204]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fb21 	bl	8002050 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7ff fb1d 	bl	8002050 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e06d      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a24:	4b29      	ldr	r3, [pc, #164]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a38:	d108      	bne.n	8002a4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a3a:	4b24      	ldr	r3, [pc, #144]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	4921      	ldr	r1, [pc, #132]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a19      	ldr	r1, [r3, #32]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	491b      	ldr	r1, [pc, #108]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7ff faf1 	bl	8002050 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a72:	f7ff faed 	bl	8002050 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e03d      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a84:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x46a>
 8002a90:	e035      	b.n	8002afe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <HAL_RCC_OscConfig+0x4cc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff fada 	bl	8002050 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7ff fad6 	bl	8002050 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e026      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x498>
 8002abe:	e01e      	b.n	8002afe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e019      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000

08002b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0d0      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b6a      	ldr	r3, [pc, #424]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d910      	bls.n	8002b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b67      	ldr	r3, [pc, #412]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 0207 	bic.w	r2, r3, #7
 8002b36:	4965      	ldr	r1, [pc, #404]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b63      	ldr	r3, [pc, #396]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0b8      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b68:	4b59      	ldr	r3, [pc, #356]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a58      	ldr	r2, [pc, #352]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b80:	4b53      	ldr	r3, [pc, #332]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a52      	ldr	r2, [pc, #328]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8c:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	494d      	ldr	r1, [pc, #308]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d040      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	4b47      	ldr	r3, [pc, #284]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d115      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e07f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b41      	ldr	r3, [pc, #260]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e073      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06b      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b39      	ldr	r3, [pc, #228]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4936      	ldr	r1, [pc, #216]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7ff fa28 	bl	8002050 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7ff fa24 	bl	8002050 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e053      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b27      	ldr	r3, [pc, #156]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d210      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 0207 	bic.w	r2, r3, #7
 8002c42:	4922      	ldr	r1, [pc, #136]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e032      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c68:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4916      	ldr	r1, [pc, #88]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c86:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	490e      	ldr	r1, [pc, #56]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c9a:	f000 f821 	bl	8002ce0 <HAL_RCC_GetSysClockFreq>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	490a      	ldr	r1, [pc, #40]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	5ccb      	ldrb	r3, [r1, r3]
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	4a09      	ldr	r2, [pc, #36]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cb6:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_RCC_ClockConfig+0x1d0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff f986 	bl	8001fcc <HAL_InitTick>

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40022000 	.word	0x40022000
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	080035ec 	.word	0x080035ec
 8002cd8:	20000058 	.word	0x20000058
 8002cdc:	2000005c 	.word	0x2000005c

08002ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d002      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x30>
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x36>
 8002d0e:	e027      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d10:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d12:	613b      	str	r3, [r7, #16]
      break;
 8002d14:	e027      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	0c9b      	lsrs	r3, r3, #18
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d20:	5cd3      	ldrb	r3, [r2, r3]
 8002d22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d2e:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0c5b      	lsrs	r3, r3, #17
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	4a11      	ldr	r2, [pc, #68]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d3a:	5cd3      	ldrb	r3, [r2, r3]
 8002d3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a0d      	ldr	r2, [pc, #52]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d42:	fb03 f202 	mul.w	r2, r3, r2
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	e004      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a0c      	ldr	r2, [pc, #48]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	613b      	str	r3, [r7, #16]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d62:	613b      	str	r3, [r7, #16]
      break;
 8002d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d66:	693b      	ldr	r3, [r7, #16]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000
 8002d78:	007a1200 	.word	0x007a1200
 8002d7c:	080035fc 	.word	0x080035fc
 8002d80:	0800360c 	.word	0x0800360c
 8002d84:	003d0900 	.word	0x003d0900

08002d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <RCC_Delay+0x34>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <RCC_Delay+0x38>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0a5b      	lsrs	r3, r3, #9
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002da4:	bf00      	nop
  }
  while (Delay --);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1e5a      	subs	r2, r3, #1
 8002daa:	60fa      	str	r2, [r7, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f9      	bne.n	8002da4 <RCC_Delay+0x1c>
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	20000058 	.word	0x20000058
 8002dc0:	10624dd3 	.word	0x10624dd3

08002dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e041      	b.n	8002e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe ff96 	bl	8001d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f000 fa56 	bl	80032b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e035      	b.n	8002ee8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	@ (8002ef4 <HAL_TIM_Base_Start_IT+0x90>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d009      	beq.n	8002eb2 <HAL_TIM_Base_Start_IT+0x4e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea6:	d004      	beq.n	8002eb2 <HAL_TIM_Base_Start_IT+0x4e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a12      	ldr	r2, [pc, #72]	@ (8002ef8 <HAL_TIM_Base_Start_IT+0x94>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d111      	bne.n	8002ed6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b06      	cmp	r3, #6
 8002ec2:	d010      	beq.n	8002ee6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed4:	e007      	b.n	8002ee6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400

08002efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d020      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0202 	mvn.w	r2, #2
 8002f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f998 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f98b 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f99a 	bl	800328e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0204 	mvn.w	r2, #4
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f972 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f965 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f974 	bl	800328e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d020      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0208 	mvn.w	r2, #8
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f94c 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f93f 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f94e 	bl	800328e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0210 	mvn.w	r2, #16
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2208      	movs	r2, #8
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f926 	bl	800327c <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f919 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f928 	bl	800328e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00c      	beq.n	8003068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0201 	mvn.w	r2, #1
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe fce4 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa6f 	bl	800356a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8f8 	bl	80032a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0220 	mvn.w	r2, #32
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa42 	bl	8003558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_TIM_ConfigClockSource+0x1c>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e0b4      	b.n	8003262 <HAL_TIM_ConfigClockSource+0x186>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800311e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003130:	d03e      	beq.n	80031b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003136:	f200 8087 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	f000 8086 	beq.w	800324e <HAL_TIM_ConfigClockSource+0x172>
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003146:	d87f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b70      	cmp	r3, #112	@ 0x70
 800314a:	d01a      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0xa6>
 800314c:	2b70      	cmp	r3, #112	@ 0x70
 800314e:	d87b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b60      	cmp	r3, #96	@ 0x60
 8003152:	d050      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003154:	2b60      	cmp	r3, #96	@ 0x60
 8003156:	d877      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b50      	cmp	r3, #80	@ 0x50
 800315a:	d03c      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xfa>
 800315c:	2b50      	cmp	r3, #80	@ 0x50
 800315e:	d873      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	2b40      	cmp	r3, #64	@ 0x40
 8003162:	d058      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x13a>
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	d86f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003168:	2b30      	cmp	r3, #48	@ 0x30
 800316a:	d064      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 800316c:	2b30      	cmp	r3, #48	@ 0x30
 800316e:	d86b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003170:	2b20      	cmp	r3, #32
 8003172:	d060      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 8003174:	2b20      	cmp	r3, #32
 8003176:	d867      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05c      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 800317c:	2b10      	cmp	r3, #16
 800317e:	d05a      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 8003180:	e062      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003192:	f000 f96a 	bl	800346a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	609a      	str	r2, [r3, #8]
      break;
 80031ae:	e04f      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031c0:	f000 f953 	bl	800346a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031d2:	609a      	str	r2, [r3, #8]
      break;
 80031d4:	e03c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 f8ca 	bl	800337c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2150      	movs	r1, #80	@ 0x50
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f921 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 80031f4:	e02c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003202:	461a      	mov	r2, r3
 8003204:	f000 f8e8 	bl	80033d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2160      	movs	r1, #96	@ 0x60
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f911 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8003214:	e01c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	461a      	mov	r2, r3
 8003224:	f000 f8aa 	bl	800337c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2140      	movs	r1, #64	@ 0x40
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f901 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8003234:	e00c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f000 f8f8 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8003246:	e003      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      break;
 800324c:	e000      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800324e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
	...

080032b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003374 <TIM_Base_SetConfig+0xc0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <TIM_Base_SetConfig+0x28>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x28>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a28      	ldr	r2, [pc, #160]	@ (8003378 <TIM_Base_SetConfig+0xc4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a20      	ldr	r2, [pc, #128]	@ (8003374 <TIM_Base_SetConfig+0xc0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <TIM_Base_SetConfig+0x52>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d003      	beq.n	8003306 <TIM_Base_SetConfig+0x52>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1d      	ldr	r2, [pc, #116]	@ (8003378 <TIM_Base_SetConfig+0xc4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d108      	bne.n	8003318 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800330c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <TIM_Base_SetConfig+0xc0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d103      	bne.n	800334c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f023 0201 	bic.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	611a      	str	r2, [r3, #16]
  }
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400

0800337c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f023 0201 	bic.w	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 030a 	bic.w	r3, r3, #10
 80033b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0210 	bic.w	r2, r3, #16
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	031b      	lsls	r3, r3, #12
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003414:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr

08003436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800344c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	f043 0307 	orr.w	r3, r3, #7
 8003458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800346a:	b480      	push	{r7}
 800346c:	b087      	sub	sp, #28
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003484:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	021a      	lsls	r2, r3, #8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	431a      	orrs	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	609a      	str	r2, [r3, #8]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034bc:	2302      	movs	r3, #2
 80034be:	e041      	b.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350c:	d004      	beq.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a10      	ldr	r2, [pc, #64]	@ (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10c      	bne.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800351e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	4313      	orrs	r3, r2
 8003528:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40000400 	.word	0x40000400

08003558 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <memset>:
 800357c:	4603      	mov	r3, r0
 800357e:	4402      	add	r2, r0
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <memset+0xa>
 8003584:	4770      	bx	lr
 8003586:	f803 1b01 	strb.w	r1, [r3], #1
 800358a:	e7f9      	b.n	8003580 <memset+0x4>

0800358c <__libc_init_array>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	2600      	movs	r6, #0
 8003590:	4d0c      	ldr	r5, [pc, #48]	@ (80035c4 <__libc_init_array+0x38>)
 8003592:	4c0d      	ldr	r4, [pc, #52]	@ (80035c8 <__libc_init_array+0x3c>)
 8003594:	1b64      	subs	r4, r4, r5
 8003596:	10a4      	asrs	r4, r4, #2
 8003598:	42a6      	cmp	r6, r4
 800359a:	d109      	bne.n	80035b0 <__libc_init_array+0x24>
 800359c:	f000 f81a 	bl	80035d4 <_init>
 80035a0:	2600      	movs	r6, #0
 80035a2:	4d0a      	ldr	r5, [pc, #40]	@ (80035cc <__libc_init_array+0x40>)
 80035a4:	4c0a      	ldr	r4, [pc, #40]	@ (80035d0 <__libc_init_array+0x44>)
 80035a6:	1b64      	subs	r4, r4, r5
 80035a8:	10a4      	asrs	r4, r4, #2
 80035aa:	42a6      	cmp	r6, r4
 80035ac:	d105      	bne.n	80035ba <__libc_init_array+0x2e>
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b4:	4798      	blx	r3
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7ee      	b.n	8003598 <__libc_init_array+0xc>
 80035ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80035be:	4798      	blx	r3
 80035c0:	3601      	adds	r6, #1
 80035c2:	e7f2      	b.n	80035aa <__libc_init_array+0x1e>
 80035c4:	08003610 	.word	0x08003610
 80035c8:	08003610 	.word	0x08003610
 80035cc:	08003610 	.word	0x08003610
 80035d0:	08003614 	.word	0x08003614

080035d4 <_init>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr

080035e0 <_fini>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	bf00      	nop
 80035e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e6:	bc08      	pop	{r3}
 80035e8:	469e      	mov	lr, r3
 80035ea:	4770      	bx	lr
